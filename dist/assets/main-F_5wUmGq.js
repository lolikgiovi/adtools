import{p as c,a as o}from"./utils-P83EfEoD.js";import"./vendor-ItrcfzAD.js";const d=`
    <div class="tool-container">
      <h3 id="sectionText">Image to Base64</h3>
      <input type="file" class="fileInput" id="imageInput" accept="image/*" multiple>
      <div id="imagePreview" class="image-preview"></div>
      <div class="button-group">
        <button id="clearInputButton" style="display:none;">Clear</button>
        <button id="downloadAllBase64Button" style="display:none;">Download All Base64</button>
      </div>
    </div>

    <div class="tool-container">
      <h3 id="sectionText">Base64 to Image</h3>
      <textarea id="base64Input" placeholder="Paste base64 string here"></textarea>
      <div class="button-group">
        <input type="file" class="fileInput" id="base64FileInput" accept=".txt" multiple>
        <button id="pasteButton">Paste</button>
        <button id="convertToImage">Convert to Image</button>
        <button id="clearResultButton" style="display:none;">Clear</button>
        <button id="downloadAllImagesButton" style="display:none;">Download All Images</button>
      </div>
      <div id="convertedImagePreview" class="image-preview"></div>
    </div>
`;class m{async imageToBase64(e){return new Promise((n,t)=>{const a=new FileReader;a.onload=()=>{const i=a.result,s=e.type||"image/png";if(i.startsWith(`data:${s};base64,`))n(i);else{const r=i.split(",")[1];n(`data:${s};base64,${r}`)}},a.onerror=t,a.readAsDataURL(e)})}async readFileAsText(e){return new Promise((n,t)=>{const a=new FileReader;a.onload=i=>n(i.target.result),a.onerror=t,a.readAsText(e)})}async convertBase64ToImage(e,n){if(e.startsWith("data:image")){const t=await fetch(e).then(a=>a.blob());return new File([t],n,{type:t.type})}else throw new Error("Invalid base64 string")}async createZipFromImages(e){const n=new JSZip;for(let t=0;t<e.length;t++){const i=await(await fetch(e[t].src)).blob();n.file(`image_${t+1}.png`,i)}return n.generateAsync({type:"blob"})}async createZipFromBase64(e){const n=new JSZip;for(let t=0;t<e.length;t++){const i=await(await fetch(e[t].src)).blob(),s=await this.imageToBase64(i);n.file(`image_${t+1}.txt`,s)}return n.generateAsync({type:"blob"})}}class u{constructor(e){this.container=e,this.imageService=new m,this.selectedFiles=[],this.init()}async init(){await this.initializeUi(),this.bindElements(),this.setupEventListeners()}async initializeUi(){return new Promise(e=>{this.container.innerHTML=d,requestAnimationFrame(()=>{e()})})}bindElements(){this.elements={imageInput:document.getElementById("imageInput"),imagePreview:document.getElementById("imagePreview"),clearResultButton:document.getElementById("clearResultButton"),clearInputButton:document.getElementById("clearInputButton"),downloadAllBase64Button:document.getElementById("downloadAllBase64Button"),base64Input:document.getElementById("base64Input"),base64FileInput:document.getElementById("base64FileInput"),convertedImagePreview:document.getElementById("convertedImagePreview"),downloadAllImagesButton:document.getElementById("downloadAllImagesButton"),pasteButton:document.getElementById("pasteButton"),convertToImageButton:document.getElementById("convertToImage")}}setupEventListeners(){this.elements.imageInput.addEventListener("change",e=>this.handleImageSelection(e)),this.elements.clearInputButton.addEventListener("click",()=>this.clearInput()),this.elements.base64FileInput.addEventListener("change",e=>this.handleBase64FileSelection(e)),this.elements.convertToImageButton.addEventListener("click",()=>this.convertToImage()),this.elements.clearResultButton.addEventListener("click",()=>this.clearResult()),this.elements.pasteButton.addEventListener("click",()=>c(this.elements.base64Input)),this.elements.downloadAllBase64Button.addEventListener("click",()=>this.downloadAllBase64()),this.elements.downloadAllImagesButton.addEventListener("click",()=>this.downloadAllImages())}async handleImageSelection(e){this.selectedFiles=Array.from(e.target.files),await this.updateImagePreview(),this.showHideDownloadAllButtons()}async updateImagePreview(){const{imagePreview:e,clearInputButton:n}=this.elements;e.innerHTML="",e.style.display="none";for(const t of this.selectedFiles){const a=await o(t);e.appendChild(a),e.style.display="flex"}n.style.display=e.childElementCount>0?"inline-block":"none"}async handleBase64FileSelection(e){const n=Array.from(e.target.files);this.elements.convertedImagePreview.innerHTML="";for(const t of n){const a=await this.imageService.readFileAsText(t);await this.displayConvertedImage(a,t.name)}}async convertToImage(){const e=this.elements.base64Input.value.trim();if(e){const n=e.startsWith("data:image")?e:`data:image/png;base64,${e}`;await this.displayConvertedImage(n,"Pasted Image")}}clearResult(){const{base64FileInput:e,base64Input:n,convertedImagePreview:t,clearResultButton:a}=this.elements;e.value="",n.value="",t.innerHTML="",t.style.display="none",a.style.display="none"}async displayConvertedImage(e,n){const{convertedImagePreview:t,clearResultButton:a}=this.elements;try{const i=await this.imageService.convertBase64ToImage(e,n),s=await o(i,!0);t.appendChild(s),a.style.display=t.childElementCount>0?"inline-block":"none",t.style.display="flex",this.showHideDownloadAllButtons()}catch{console.error("Invalid base64 string for",n)}}clearInput(){const{imageInput:e,imagePreview:n,clearInputButton:t,downloadAllBase64Button:a}=this.elements;e.value="",n.innerHTML="",t.style.display="none",n.style.display="none",a.style.display="none"}showHideDownloadAllButtons(){const{downloadAllBase64Button:e,downloadAllImagesButton:n,imagePreview:t,convertedImagePreview:a}=this.elements;e.style.display=t.childElementCount>1?"inline-block":"none",n.style.display=a.childElementCount>1?"inline-block":"none"}async downloadAllBase64(){const e=this.elements.imagePreview.querySelectorAll("div img"),n=await this.imageService.createZipFromBase64(e),t=document.createElement("a");t.href=URL.createObjectURL(n),t.download="image_to_base64.zip",t.click()}async downloadAllImages(){const e=this.elements.convertedImagePreview.querySelectorAll("div img"),n=await this.imageService.createZipFromImages(e),t=document.createElement("a");t.href=URL.createObjectURL(n),t.download="base64_to_image.zip",t.click()}}async function h(l){return new u(l)}export{h as initImageConverter};
//# sourceMappingURL=main-F_5wUmGq.js.map
