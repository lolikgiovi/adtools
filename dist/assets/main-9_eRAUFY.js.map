{"version":3,"file":"main-9_eRAUFY.js","sources":["../../src/features/quickQuery/services/LocalStorageService.js","../../src/features/quickQuery/services/ValueProcessorService.js","../../src/features/quickQuery/constants/Constants.js","../../src/features/quickQuery/services/AttachmentValidationService.js","../../src/features/quickQuery/services/QueryGenerationService.js","../../src/features/quickQuery/services/SchemaValidationService.js","../../src/features/quickQuery/services/SQLSplitterService.js","../../src/features/quickQuery/services/AttachmentProcessorService.js","../../src/features/quickQuery/templates/main.html?raw","../../src/features/quickQuery/templates/tutorial.html?raw","../../src/features/quickQuery/quickQuery.ui.js","../../src/features/quickQuery/main.js"],"sourcesContent":["const STORAGE_KEY = \"quickquery_schemas\";\nconst ORACLE_NAME_REGEX = /^[a-zA-Z][a-zA-Z0-9_$#]*$/;\nconst MAX_SCHEMA_LENGTH = 30;\nconst MAX_TABLE_LENGTH = 128;\nconst MAX_CACHED_ROWS = 100;\n\nexport class LocalStorageService {\n  constructor() {\n    this.STORAGE_KEY = STORAGE_KEY;\n  }\n\n  // Storage Helper Functions\n  parseTableIdentifier(fullTableName) {\n    const [schemaName, tableName] = fullTableName.split(\".\");\n    if (!schemaName || !tableName) {\n      throw new Error('Invalid table name format. Expected \"schema_name.table_name\"');\n    }\n    return { schemaName, tableName };\n  }\n\n  getStorageData() {\n    try {\n      const data = localStorage.getItem(this.STORAGE_KEY);\n      if (!data) {\n        return {\n          schemas: {},\n          lastUpdated: new Date().toISOString(),\n        };\n      }\n      return JSON.parse(data);\n    } catch (error) {\n      console.error(\"Error reading storage:\", error);\n      return {\n        schemas: {},\n        lastUpdated: new Date().toISOString(),\n      };\n    }\n  }\n\n  saveStorageData(data) {\n    try {\n      data.lastUpdated = new Date().toISOString();\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(data));\n      return true;\n    } catch (error) {\n      console.error(\"Error saving to storage:\", error);\n      return false;\n    }\n  }\n\n  // Schema Management Functions\n  saveSchema(fullTableName, schemaData, tableData = null) {\n    try {\n      const { schemaName, tableName } = this.parseTableIdentifier(fullTableName);\n      const storageData = this.getStorageData();\n\n      if (!storageData.schemas[schemaName]) {\n        storageData.schemas[schemaName] = { tables: {} };\n      }\n\n      storageData.schemas[schemaName].tables[tableName] = {\n        schema: schemaData,\n        data: tableData ? tableData.slice(0, MAX_CACHED_ROWS) : null,\n        timestamp: new Date().toISOString(),\n      };\n\n      return this.saveStorageData(storageData);\n    } catch (error) {\n      console.error(\"Error saving schema:\", error);\n      return false;\n    }\n  }\n\n  loadSchema(fullTableName, includeData = false) {\n    try {\n      const { schemaName, tableName } = this.parseTableIdentifier(fullTableName);\n      const storageData = this.getStorageData();\n      const tableInfo = storageData.schemas[schemaName]?.tables[tableName];\n\n      if (!tableInfo) return null;\n\n      if (!includeData) {\n        return tableInfo.schema;\n      }\n\n      return {\n        schema: tableInfo.schema,\n        data: tableInfo.data || null,\n      };\n    } catch (error) {\n      console.error(\"Error loading schema:\", error);\n      return null;\n    }\n  }\n\n  updateTableData(fullTableName, tableData) {\n    try {\n      const { schemaName, tableName } = this.parseTableIdentifier(fullTableName);\n      const storageData = this.getStorageData();\n\n      if (!storageData.schemas[schemaName]?.tables[tableName]) {\n        return false;\n      }\n\n      storageData.schemas[schemaName].tables[tableName].data = tableData.slice(0, MAX_CACHED_ROWS);\n      storageData.schemas[schemaName].tables[tableName].timestamp = new Date().toISOString();\n\n      return this.saveStorageData(storageData);\n    } catch (error) {\n      console.error(\"Error updating table data:\", error);\n      return false;\n    }\n  }\n\n  deleteSchema(fullTableName) {\n    try {\n      const { schemaName, tableName } = this.parseTableIdentifier(fullTableName);\n      const storageData = this.getStorageData();\n\n      if (storageData.schemas[schemaName]?.tables[tableName]) {\n        delete storageData.schemas[schemaName].tables[tableName];\n\n        if (Object.keys(storageData.schemas[schemaName].tables).length === 0) {\n          delete storageData.schemas[schemaName];\n        }\n\n        return this.saveStorageData(storageData);\n      }\n      return false;\n    } catch (error) {\n      console.error(\"Error deleting schema:\", error);\n      return false;\n    }\n  }\n\n  clearAllSchemas() {\n    try {\n      localStorage.removeItem(this.STORAGE_KEY);\n      return true;\n    } catch (error) {\n      console.error(\"Error clearing schemas:\", error);\n      return false;\n    }\n  }\n\n  // Query Functions\n  getAllTables() {\n    const storageData = this.getStorageData();\n    const allTables = [];\n\n    Object.entries(storageData.schemas).forEach(([schemaName, schemaData]) => {\n      Object.entries(schemaData.tables).forEach(([tableName, tableData]) => {\n        allTables.push({\n          fullName: `${schemaName}.${tableName}`,\n          schemaName,\n          tableName,\n          timestamp: tableData.timestamp,\n        });\n      });\n    });\n\n    return allTables.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n  }\n\n  // Schema searching functions\n  getByteLength(str) {\n    return new TextEncoder().encode(str).length;\n  }\n\n  validateOracleName(name, type = \"schema\") {\n    if (!name) return false;\n\n    if (!ORACLE_NAME_REGEX.test(name)) return false;\n\n    const byteLength = this.getByteLength(name);\n    if (type === \"schema\" && byteLength > MAX_SCHEMA_LENGTH) return false;\n    if (type === \"table\" && byteLength > MAX_TABLE_LENGTH) return false;\n\n    return true;\n  }\n\n  sqlLikeToRegex(pattern) {\n    return new RegExp(\"^\" + pattern.replace(/%/g, \".*\").replace(/_/g, \".\").replace(/\\[/g, \"\\\\[\").replace(/\\]/g, \"\\\\]\") + \"$\", \"i\");\n  }\n\n  getSchemaAbbreviations(schemaName) {\n    const parts = schemaName.split(\"_\");\n    const abbrs = new Set();\n\n    abbrs.add(parts.map((part) => part[0]?.toLowerCase()).join(\"\"));\n\n    if (parts.length > 2) {\n      abbrs.add(\n        parts\n          .slice(0, 2)\n          .map((part) => part[0]?.toLowerCase())\n          .join(\"\")\n      );\n    }\n\n    for (let i = 0; i < parts.length - 1; i++) {\n      abbrs.add(\n        parts\n          .slice(i, i + 2)\n          .map((part) => part[0]?.toLowerCase())\n          .join(\"\")\n      );\n    }\n\n    return abbrs;\n  }\n\n  getScore(schema, table, searchTerm) {\n    const termLower = searchTerm.toLowerCase();\n    schema = schema.toLowerCase();\n    table = table?.toLowerCase();\n\n    const schemaAbbrs = this.getSchemaAbbreviations(schema);\n\n    if (schema === termLower) return 7;\n    if (table === termLower) return 6;\n    if (schemaAbbrs.has(termLower)) return 5;\n    if (schema.startsWith(termLower)) return 4;\n    if (table?.startsWith(termLower)) return 3;\n    if (schema.includes(termLower)) return 2;\n    if (table?.includes(termLower)) return 1;\n    return 0;\n  }\n\n  searchSavedSchemas(searchTerm) {\n    const allTables = this.getAllTables();\n    if (!searchTerm) return allTables;\n\n    let [schemaSearch, tableSearch] = searchTerm.split(\".\");\n\n    if (!tableSearch) {\n      const searchPattern = `%${schemaSearch}%`;\n      const pattern = this.sqlLikeToRegex(searchPattern);\n\n      return allTables\n        .filter((table) => {\n          const schemaAbbrs = this.getSchemaAbbreviations(table.schemaName);\n          return pattern.test(table.schemaName) || pattern.test(table.tableName) || schemaAbbrs.has(schemaSearch.toLowerCase());\n        })\n        .sort((a, b) => {\n          const scoreA = this.getScore(a.schemaName, a.tableName, schemaSearch);\n          const scoreB = this.getScore(b.schemaName, b.tableName, schemaSearch);\n\n          return scoreB - scoreA || a.schemaName.localeCompare(b.schemaName);\n        });\n    } else {\n      const schemaPattern = this.sqlLikeToRegex(`%${schemaSearch}%`);\n      const tablePattern = this.sqlLikeToRegex(`%${tableSearch}%`);\n\n      return allTables\n        .filter((table) => {\n          const schemaAbbrs = this.getSchemaAbbreviations(table.schemaName);\n          return (\n            (schemaPattern.test(table.schemaName) || schemaAbbrs.has(schemaSearch.toLowerCase())) && tablePattern.test(table.tableName)\n          );\n        })\n        .sort((a, b) => {\n          const schemaAbbrsA = this.getSchemaAbbreviations(a.schemaName);\n          const schemaAbbrsB = this.getSchemaAbbreviations(b.schemaName);\n\n          const schemaMatchA = schemaSearch.toLowerCase() === a.schemaName.toLowerCase() || schemaAbbrsA.has(schemaSearch.toLowerCase());\n          const schemaMatchB = schemaSearch.toLowerCase() === b.schemaName.toLowerCase() || schemaAbbrsB.has(schemaSearch.toLowerCase());\n\n          if (schemaMatchA !== schemaMatchB) return schemaMatchB ? 1 : -1;\n\n          const tableMatchA = tableSearch.toLowerCase() === a.tableName.toLowerCase();\n          const tableMatchB = tableSearch.toLowerCase() === b.tableName.toLowerCase();\n\n          return tableMatchA ? -1 : tableMatchB ? 1 : 0;\n        });\n    }\n  }\n\n  validateSchemaFormat(data) {\n    if (!data || typeof data !== \"object\") return false;\n\n    return Object.entries(data).every(([schemaName, tables]) => {\n      if (typeof tables !== \"object\") return false;\n\n      return Object.entries(tables).every(([tableName, schema]) => {\n        return (\n          Array.isArray(schema) &&\n          schema.every(\n            (row) =>\n              Array.isArray(row) &&\n              row.length >= 3 &&\n              typeof row[0] === \"string\" &&\n              typeof row[1] === \"string\" &&\n              typeof row[2] === \"string\"\n          )\n        );\n      });\n    });\n  }\n}\n","import moment from \"moment\";\n\nexport class ValueProcessorService {\n  constructor() {}\n\n  processValue(value, dataType, nullable, fieldName, tableName) {\n    // Constants\n    const AUDIT_FIELDS = {\n      time: [\"created_time\", \"updated_time\"],\n      by: [\"created_by\", \"updated_by\"],\n    };\n\n    // Handle audit fields\n    if (AUDIT_FIELDS.time.includes(fieldName)) {\n      const hasNoValue = !value;\n      const hasNoTimestampCharacters = !/[-/]/.test(value);\n      return hasNoValue || hasNoTimestampCharacters ? \"SYSDATE\" : this.formatTimestamp(value);\n    }\n\n    if (AUDIT_FIELDS.by.includes(fieldName)) {\n      return value?.trim() ? `'${value.replace(/'/g, \"''\")}'` : \"'SYSTEM'\";\n    }\n\n    // Handle NULL values\n    const isNullValue = value === null || value === undefined || value === \"\" || value?.toLowerCase() === \"null\";\n    if (isNullValue) {\n      if (nullable?.toLowerCase() !== \"yes\") {\n        throw new Error(`NULL value not allowed for non-nullable field \"${fieldName}\"`);\n      }\n      return \"NULL\";\n    }\n\n    // Handle special ID fields\n    const upperDataType = dataType.toUpperCase();\n\n    // Config ID with NUMBER type, OR field ends with _id\n    if ((fieldName === \"config_id\" && upperDataType === \"NUMBER\") || (fieldName.endsWith(\"_id\") && value?.toLowerCase() === \"max\")) {\n      return `(SELECT MAX(${fieldName})+1 FROM ${tableName})`;\n    }\n\n    // Config ID with VARCHAR type\n    if (fieldName === \"config_id\" && upperDataType.startsWith(\"VARCHAR\")) {\n      if (value.toLowerCase() === \"uuid\" || !this.isValidUUID(value)) {\n        return `'${crypto.randomUUID()}'`;\n      }\n      return `'${value}'`;\n    }\n\n    // System config ID\n    if (fieldName === \"system_config_id\") {\n      return `(SELECT MAX(CAST(${fieldName} AS INT))+1 FROM ${tableName})`;\n    }\n\n    // Process regular values based on data type\n    const fieldDataType = this.parseDataType(dataType);\n\n    switch (fieldDataType.type) {\n      case \"NUMBER\":\n        // NUMBER(1,0) / boolean number\n        if (fieldDataType.precision === 1 && fieldDataType.scale === 0) {\n          if (value !== \"0\" && value !== \"1\" && value !== 0 && value !== 1) {\n            throw new Error(`Invalid boolean value \"${value}\" for field \"${fieldName}\". Only 0 or 1 are allowed.`);\n          }\n          return value;\n        }\n\n        // Convert comma to dot if present\n        const normalizedValue = value.toString().replace(\",\", \".\");\n        const num = parseFloat(normalizedValue);\n\n        if (isNaN(num)) {\n          throw new Error(`Invalid numeric value \"${value}\" for field \"${fieldName}\"`);\n        }\n\n        // Validate precision and scale if specified\n        if (fieldDataType.precision) {\n          this.validateNumberPrecision(num, fieldDataType.precision, fieldDataType.scale, fieldName);\n        }\n\n        return normalizedValue;\n\n      case \"VARCHAR\":\n      case \"VARCHAR2\":\n      case \"CHAR\":\n        const UUID_V4_MAXLENGTH = 36;\n\n        if (value.toLowerCase() === \"uuid\") {\n          if (fieldDataType.maxLength && fieldDataType.maxLength < UUID_V4_MAXLENGTH) {\n            throw new Error(\n              `Field \"${fieldName}\" length (${fieldDataType.maxLength}) is too small to store UUID. Minimum required length is ${UUID_V4_MAXLENGTH}.`\n            );\n          }\n          return `'${crypto.randomUUID()}'`;\n        }\n\n        if (fieldDataType.maxLength) {\n          const length = fieldDataType.unit === \"BYTE\" ? new TextEncoder().encode(value).length : value.length;\n\n          if (length > fieldDataType.maxLength) {\n            throw new Error(`Value exceeds maximum length of ${fieldDataType.maxLength} ${fieldDataType.unit} for field \"${fieldName}\"`);\n          }\n        }\n        return `'${value.replace(/'/g, \"''\")}'`;\n\n      case \"DATE\":\n      case \"TIMESTAMP\":\n        try {\n          return this.formatTimestamp(value);\n        } catch (error) {\n          throw new Error(`Invalid date value \"${value}\" for field \"${fieldName}\": ${error.message}`);\n        }\n\n      case \"CLOB\":\n        return this.formatCLOB(value);\n\n      case \"BLOB\":\n        return this.formatBLOB(value);\n\n      default:\n        return `'${value.replace(/'/g, \"''\")}'`;\n    }\n  }\n\n  parseDataType(dataType) {\n    const upperType = dataType.toUpperCase();\n\n    // Parse NUMBER type\n    const numberMatch = upperType.match(/NUMBER\\((\\d+)(?:,\\s*(\\d+))?\\)/);\n    if (numberMatch) {\n      return {\n        type: \"NUMBER\",\n        precision: parseInt(numberMatch[1]),\n        scale: numberMatch[2] ? parseInt(numberMatch[2]) : 0,\n      };\n    }\n\n    // Parse VARCHAR/CHAR type\n    const stringMatch = upperType.match(/(VARCHAR2?|CHAR)\\((\\d+)(?:\\s+(BYTE|CHAR))?\\)/);\n    if (stringMatch) {\n      return {\n        type: stringMatch[1],\n        maxLength: parseInt(stringMatch[2]),\n        unit: stringMatch[3] || \"BYTE\",\n      };\n    }\n\n    // Basic types\n    if (upperType.startsWith(\"TIMESTAMP\")) return { type: \"TIMESTAMP\" };\n    if (upperType === \"DATE\") return { type: \"DATE\" };\n    if (upperType === \"CLOB\") return { type: \"CLOB\" };\n    if (upperType === \"BLOB\") return { type: \"BLOB\" };\n    if (upperType === \"NUMBER\") return { type: \"NUMBER\" };\n\n    return { type: upperType };\n  }\n\n  validateNumberPrecision(num, precision, scale, fieldName) {\n    const numStr = Math.abs(num).toString();\n    const parts = numStr.split(\".\");\n\n    const integerDigits = parts[0].length;\n    const decimalDigits = parts[1]?.length || 0;\n\n    if (integerDigits + decimalDigits > precision) {\n      throw new Error(`Value ${num} exceeds maximum precision of ${precision} for field \"${fieldName}\"`);\n    }\n\n    if (scale !== undefined && decimalDigits > scale) {\n      throw new Error(`Value ${num} exceeds maximum scale of ${scale} (${precision},${scale}) for field \"${fieldName}\"`);\n    }\n\n    if (scale !== undefined && integerDigits > precision - scale) {\n      throw new Error(`Integer part of ${num} exceeds maximum allowed digits for field \"${fieldName}\"`);\n    }\n  }\n\n  findPrimaryKeys(data, tableName) {\n    // For config table, use field parameter_key if exist as primary key\n    if (tableName.toLowerCase().endsWith(\"config\")) {\n      const parameterKeyField = data.find((field) => field[0].toLowerCase() === \"parameter_key\");\n      if (parameterKeyField) return [parameterKeyField[0].toLowerCase()];\n    }\n\n    // Look for fields with \"PK\" or \"pk\" in the Nullable field\n    const pkFields = data.filter((field) => field[2].toLowerCase().includes(\"pk\")).map((field) => field[0]);\n\n    if (pkFields.length > 0) return pkFields;\n\n    // If no primary keys found, use the first field as default\n    return [data[0][0].toLowerCase()];\n  }\n\n  isValidUUID(str) {\n    const uuidV4Regex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    return uuidV4Regex.test(str);\n  }\n\n  formatTimestamp(value) {\n    // Handle special cases\n    if (!value) return \"NULL\";\n    const upperValue = value.toUpperCase();\n    if (upperValue === \"SYSDATE\" || upperValue === \"CURRENT_TIMESTAMP\") {\n      return upperValue;\n    }\n\n    try {\n      // 1. Handle ISO 8601 format with timezone\n      if (/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|[+-]\\d{2}:?\\d{2})?$/.test(value)) {\n        const parsed = moment(value);\n        if (parsed.isValid()) {\n          const fractionalMatch = value.match(/\\.(\\d+)/);\n          const precision = fractionalMatch ? Math.min(fractionalMatch[1].length, 9) : 0;\n\n          if (precision > 0) {\n            return `TO_TIMESTAMP_TZ('${parsed.format(\"YYYY-MM-DD HH:mm:ss\")}${value.substring(\n              value.indexOf(\".\"),\n              value.indexOf(\".\") + precision + 1\n            )}${parsed.format(\"Z\")}', 'YYYY-MM-DD HH24:MI:SS.FF${precision}TZH:TZM')`;\n          }\n          return `TO_TIMESTAMP_TZ('${parsed.format(\"YYYY-MM-DD HH:mm:ssZ\")}', 'YYYY-MM-DD HH24:MI:SSTZH:TZM')`;\n        }\n      }\n\n      // 2. Handle timestamps with fractional seconds\n      if (value.includes(\",\")) {\n        // First replace dots in time with colons, but keep the date dots\n        const normalizedValue = value.replace(/(\\d{2})\\.(\\d{2})\\.(\\d{2}),/, \"$1:$2:$3,\");\n        const [datePart, fractionalPart] = normalizedValue.split(\",\");\n        const precision = Math.min(fractionalPart?.length || 0, 9);\n\n        const parsed = moment(datePart, \"DD-MM-YYYY HH:mm:ss\", true);\n        if (parsed.isValid()) {\n          return `TO_TIMESTAMP('${parsed.format(\"YYYY-MM-DD HH:mm:ss\")}.${fractionalPart.substring(\n            0,\n            precision\n          )}', 'YYYY-MM-DD HH24:MI:SS.FF${precision}')`;\n        }\n      }\n\n      // 3. Handle common formats with strict parsing\n      const commonFormats = [\n        \"YYYY-MM-DD HH:mm:ss\",\n        \"DD-MM-YYYY HH:mm:ss\",\n        \"MM/DD/YYYY HH:mm:ss\",\n        \"DD/MM/YYYY HH:mm:ss\",\n        \"YYYY-MM-DD\",\n        \"DD-MM-YYYY\",\n        \"MM/DD/YYYY\",\n        \"DD/MM/YYYY\",\n        \"DD-MMM-YYYY\",\n        \"DD-MMM-YY\",\n        \"DD.MM.YYYY HH:mm:ss\",\n        \"DD.MM.YYYY\",\n        \"YYYY/MM/DD HH:mm:ss\",\n        \"YYYY/MM/DD\",\n      ];\n\n      for (const format of commonFormats) {\n        const parsed = moment(value, format, true);\n        if (parsed.isValid()) {\n          return `TO_TIMESTAMP('${parsed.format(\"YYYY-MM-DD HH:mm:ss\")}', 'YYYY-MM-DD HH24:MI:SS')`;\n        }\n      }\n\n      // 4. Handle AM/PM format\n      if (/[AaPpMm]/.test(value)) {\n        const amPmFormats = [\n          \"MM/DD/YYYY hh:mm:ss A\",\n          \"DD-MM-YYYY hh:mm:ss A\",\n          \"YYYY-MM-DD hh:mm:ss A\",\n          \"DD/MM/YYYY hh:mm:ss A\",\n          \"MM-DD-YYYY hh:mm:ss A\",\n        ];\n\n        for (const format of amPmFormats) {\n          const parsed = moment(value, format, true);\n          if (parsed.isValid()) {\n            return `TO_TIMESTAMP('${parsed.format(\"YYYY-MM-DD HH:mm:ss\")}', 'YYYY-MM-DD HH24:MI:SS')`;\n          }\n        }\n      }\n\n      // 5. Last resort: try flexible parsing\n      const parsed = moment(value);\n      if (parsed.isValid()) {\n        return `TO_TIMESTAMP('${parsed.format(\"YYYY-MM-DD HH:mm:ss\")}', 'YYYY-MM-DD HH24:MI:SS')`;\n      }\n\n      throw new Error(`Unable to parse date format: ${value}`);\n    } catch (error) {\n      console.error(`Error parsing timestamp: ${value}`, error);\n      throw new Error(`Invalid timestamp format: ${value}. Please use a valid date/time format.`);\n    }\n  }\n\n  formatCLOB(value) {\n    const chunkSize = 1000;\n    let result = \"\";\n    let currentChunkSize = 0;\n    let isFirstChunk = true;\n\n    for (let i = 0; i < value.length; i++) {\n      let char = value[i];\n\n      if (char === \"'\" || char === \"\\u2018\" || char === \"\\u2019\") {\n        char = \"''\";\n      } else if (char === \"\\u201C\" || char === \"\\u201D\") {\n        char = '\"';\n      }\n\n      if (currentChunkSize + char.length > chunkSize || isFirstChunk) {\n        if (!isFirstChunk) {\n          result += \"') || \\n\";\n        }\n        result += \"to_clob('\";\n        currentChunkSize = 0;\n        isFirstChunk = false;\n      }\n\n      result += char;\n      currentChunkSize += char.length;\n    }\n\n    result += \"')\";\n    return result;\n  }\n\n  formatBLOB(value) {\n    return `UTL_RAW.CAST_TO_RAW('${value}')`;\n  }\n}\n","export const oracleReservedWords = new Set([\n  \"access\",\n  \"add\",\n  \"all\",\n  \"alter\",\n  \"and\",\n  \"any\",\n  \"as\",\n  \"asc\",\n  \"audit\",\n  \"between\",\n  \"by\",\n  \"char\",\n  \"check\",\n  \"cluster\",\n  \"column\",\n  \"comment\",\n  \"compress\",\n  \"connect\",\n  \"create\",\n  \"current\",\n  \"date\",\n  \"decimal\",\n  \"default\",\n  \"delete\",\n  \"desc\",\n  \"distinct\",\n  \"drop\",\n  \"else\",\n  \"exclusive\",\n  \"exists\",\n  \"file\",\n  \"float\",\n  \"for\",\n  \"from\",\n  \"grant\",\n  \"group\",\n  \"having\",\n  \"identified\",\n  \"immediate\",\n  \"in\",\n  \"increment\",\n  \"index\",\n  \"initial\",\n  \"insert\",\n  \"integer\",\n  \"intersect\",\n  \"into\",\n  \"is\",\n  \"level\",\n  \"like\",\n  \"lock\",\n  \"long\",\n  \"maxextents\",\n  \"minus\",\n  \"mlslabel\",\n  \"mode\",\n  \"modify\",\n  \"noaudit\",\n  \"nocompress\",\n  \"not\",\n  \"nowait\",\n  \"null\",\n  \"number\",\n  \"of\",\n  \"offline\",\n  \"on\",\n  \"online\",\n  \"option\",\n  \"or\",\n  \"order\",\n  \"pctfree\",\n  \"prior\",\n  \"privileges\",\n  \"public\",\n  \"raw\",\n  \"rename\",\n  \"resource\",\n  \"revoke\",\n  \"row\",\n  \"rowid\",\n  \"rownum\",\n  \"rows\",\n  \"select\",\n  \"session\",\n  \"set\",\n  \"share\",\n  \"size\",\n  \"smallint\",\n  \"start\",\n  \"successful\",\n  \"synonym\",\n  \"sysdate\",\n  \"table\",\n  \"then\",\n  \"to\",\n  \"trigger\",\n  \"uid\",\n  \"union\",\n  \"unique\",\n  \"update\",\n  \"user\",\n  \"validate\",\n  \"values\",\n  \"varchar\",\n  \"varchar2\",\n  \"view\",\n  \"whenever\",\n  \"where\",\n  \"with\",\n  \"sequence\",\n  \"type\",\n  \"package\",\n  \"body\",\n]);\n\nexport const oracleDateFormats = {\n  DATE_ONLY: {\n    formats: [\"DD/MM/YYYY\", \"DD-MM-YYYY\", \"YYYY-MM-DD\", \"DD/M/YYYY\", \"M/D/YYYY\", \"DD-MON-YY\", \"DD-MON-YYYY\"],\n    regex: /^(\\d{2}[-/]\\d{2}[-/]\\d{4}|\\d{4}-\\d{2}-\\d{2}|\\d{1,2}\\/\\d{1,2}\\/\\d{4}|\\d{2}-[A-Z]{3}-\\d{2}|\\d{2}-[A-Z]{3}-\\d{4})$/i,\n    oracleFormat: \"YYYY-MM-DD\",\n  },\n  DATE_TIME: {\n    formats: [\"DD-MM-YYYY HH:mm:ss\", \"YYYY-MM-DD HH:mm:ss\", \"DD-MON-YYYY HH:mm:ss\"],\n    regex: /^(\\d{2}-\\d{2}-\\d{4}|\\d{4}-\\d{2}-\\d{2}|\\d{2}-[A-Z]{3}-\\d{4})\\s\\d{2}:\\d{2}:\\d{2}$/i,\n    oracleFormat: \"DD-MM-YYYY HH24:MI:SS\",\n  },\n  ISO_TIMESTAMP: {\n    formats: [\"YYYY-MM-DD HH:mm:ss.SSS\"],\n    regex: /^\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2}\\.\\d{3}$/,\n    oracleFormat: \"YYYY-MM-DD HH24:MI:SS.FF3\",\n  },\n  TIMESTAMP: {\n    formats: [\"DD-MM-YYYY HH.mm.ss,SSSSSSSSS\"],\n    regex: /^\\d{2}-\\d{2}-\\d{4}\\s\\d{2}\\.\\d{2}\\.\\d{2},\\d{1,9}$/,\n    oracleFormat: \"DD-MM-YYYY HH24:MI:SS.FF9\",\n  },\n  TIMESTAMP_AM_PM: {\n    formats: [\"M/D/YYYY h:mm:ss.SSSSSS A\"],\n    regex: /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}\\s\\d{1,2}:\\d{2}:\\d{2}(\\.\\d{1,6})?\\s[AP]M$/,\n    oracleFormat: \"MM/DD/YYYY HH24:MI:SS.FF6\",\n  },\n};\n\nexport const sampleSchema1 = [\n  [\"TABLE_ID\", \"VARCHAR2(36)\", \"PK\", \"\", \"1\"],\n  [\"DESC_ID\", \"VARCHAR2(500)\", \"PK\", \"\", \"2\"],\n  [\"DESC_EN\", \"VARCHAR2(500)\", \"No\", \"\", \"3\"],\n  [\"AMOUNT\", \"NUMBER(15,2)\", \"Yes\", \"\", \"4\"],\n  [\"SEQUENCE\", \"NUMBER(3,0)\", \"No\", \"\", \"5\"],\n  [\"IS_ACTIVE\", \"NUMBER\", \"No\", \"\", \"6\"],\n  [\"CREATED_TIME\", \"TIMESTAMP(6)\", \"No\", \"\", \"7\"],\n  [\"CREATED_BY\", \"VARCHAR2(36)\", \"No\", \"\", \"8\"],\n  [\"UPDATED_TIME\", \"TIMESTAMP(6)\", \"No\", \"\", \"9\"],\n  [\"UPDATED_BY\", \"VARCHAR2(36)\", \"No\", \"\", \"10\"],\n];\n\nexport const sampleData1 = [\n  [\"TABLE_ID\", \"DESC_ID\", \"DESC_EN\", \"AMOUNT\", \"SEQUENCE\", \"IS_ACTIVE\", \"CREATED_TIME\", \"CREATED_BY\", \"UPDATED_TIME\", \"UPDATED_BY\"],\n  [\"TABLE_ID_1\", \"DESC_ID_1\", \"DESC_EN_1\", \"100000\", \"1\", \"1\", \"CREATED_TIME_1\", \"CREATED_BY_1\", \"UPDATED_TIME_1\", \"UPDATED_BY_1\"],\n  [\"TABLE_ID_2\", \"DESC_ID_2\", \"DESC_EN_2\", \"\", \"2\", \"1\", \"CREATED_TIME_2\", \"CREATED_BY_2\", \"UPDATED_TIME_2\", \"UPDATED_BY_2\"],\n];\n\nexport const initialSchemaTableSpecification = {\n  data: [[\"\", \"\", \"\", \"\"]], // empty data\n  colHeaders: [\"Field Name\", \"Data Type\", \"Nullable/PK\", \"Default\", \"Field Order\", \"Comments\"],\n  columns: [\n    {\n      renderer: function (instance, td, row, col, prop, value, cellProperties) {\n        Handsontable.renderers.TextRenderer.apply(this, arguments);\n        td.style.fontWeight = \"bold\";\n      },\n    },\n    {},\n    {\n      type: \"dropdown\",\n      source: [\"Yes\", \"No\", \"PK\"],\n      validator: function (value, callback) {\n        callback([\"Yes\", \"No\", \"PK\", \"yes\", \"no\", \"pk\", \"Yes\", \"No\", \"Pk\", \"Y\", \"N\", \"y\", \"n\"].includes(value));\n      },\n      renderer: function (instance, td, row, col, prop, value, cellProperties) {\n        Handsontable.renderers.DropdownRenderer.apply(this, arguments);\n        td.style.textAlign = \"center\";\n      },\n    },\n    {},\n    {\n      type: \"numeric\",\n      validator: function (value, callback) {\n        callback(value === null || value === \"\" || !isNaN(parseFloat(value)));\n      },\n      renderer: function (instance, td, row, col, prop, value, cellProperties) {\n        Handsontable.renderers.NumericRenderer.apply(this, arguments);\n        td.style.textAlign = \"center\";\n      },\n    },\n    {},\n  ],\n  height: \"auto\",\n  licenseKey: \"non-commercial-and-evaluation\",\n  minCols: 6,\n  minRows: 1,\n  contextMenu: true,\n  mergeCells: true,\n  manualColumnResize: true,\n  afterChange: (changes) => {\n    if (changes) {\n      this.updateDataSpreadsheet();\n    }\n  },\n  afterGetColHeader: function (col, TH) {\n    const header = TH.querySelector(\".colHeader\");\n    if (header) {\n      header.style.fontWeight = \"bold\";\n    }\n  },\n};\n\nexport const initialDataTableSpecification = {\n  data: [[], []],\n  colHeaders: true,\n  rowHeaders: true,\n  height: \"auto\",\n  licenseKey: \"non-commercial-and-evaluation\",\n  minCols: 1,\n  contextMenu: true,\n  manualColumnResize: true,\n  stretchH: \"none\",\n  className: \"hide-scrollbar\",\n  cells: function (row, col) {\n    const cellProperties = {};\n    if (row === 0) {\n      cellProperties.renderer = function (instance, td, row, col, prop, value, cellProperties) {\n        Handsontable.renderers.TextRenderer.apply(this, arguments);\n        td.style.fontWeight = \"bold\";\n        td.style.textAlign = \"center\";\n      };\n    }\n    return cellProperties;\n  },\n};\n\nexport const sampleSchema2 = [\n  // Test case: Mixed case field names and special characters\n  [\"Field_NAME_1\", \"VARCHAR2(50)\", \"PK\", \"\", \"1\", \"Test PK field\"],\n\n  // Test case: Number field with maximum precision and scale\n  [\"amount_2\", \"NUMBER(38,10)\", \"No\", \"0\", \"2\", \"Max Oracle number\"],\n\n  // Test case: Nullable field with default\n  [\"description\", \"VARCHAR2(4000)\", \"Yes\", \"'N/A'\", \"3\", \"Max VARCHAR2\"],\n\n  // Test case: Boolean/Flag field\n  [\"is_active_FLAG\", \"NUMBER(1,0)\", \"No\", \"1\", \"4\", \"Boolean field\"],\n\n  // Test case: Reserved word as field name\n  ['\"TABLE\"', \"VARCHAR2(100)\", \"No\", \"\", \"5\", \"Reserved word\"],\n\n  // Test case: Timestamp with timezone\n  [\"event_time\", \"TIMESTAMP(9) WITH TIME ZONE\", \"No\", \"SYSDATE\", \"6\", \"Max precision\"],\n\n  // Test case: CLOB type\n  [\"large_text\", \"CLOB\", \"Yes\", \"\", \"7\", \"CLOB field\"],\n];\n\nexport const sampleData2 = [\n  // Header row - mixed case and special characters\n  [\"Field_NAME_1\", \"amount_2\", \"description\", \"is_active_FLAG\", '\"TABLE\"', \"event_time\", \"large_text\"],\n\n  // Row 1: Testing maximum values and special cases\n  [\n    \"ABC123!@#$\", // PK with special chars\n    \"12345678901234567890.1234567890\", // Large number\n    \"This is a very long text string that tests the VARCHAR2 limit...\", // Long text\n    \"1\", // Boolean true\n    \"DROP TABLE\", // SQL keyword\n    \"2024-12-31 23:59:59.999999999 +00:00\", // Max timestamp\n    \"Very long CLOB text...\", // CLOB content\n  ],\n\n  // Row 2: Testing minimum/edge values\n  [\n    \"\", // Empty PK (should trigger error)\n    \"-0.00000000001\", // Small negative number\n    \"\", // Empty nullable field\n    \"0\", // Boolean false\n    \"\", // Empty reserved word field\n    \"\", // Empty timestamp (should use SYSDATE)\n    \"\", // Empty CLOB\n  ],\n\n  // Row 3: Testing special characters and formats\n  [\n    \"PK''QUOTE\", // Single quote in PK\n    \"1,234.56\", // Number with comma\n    \"Line1\\nLine2\", // Text with newline\n    \"2\", // Invalid boolean (should trigger error)\n    \"TABLE;DROP\", // Semicolon in text\n    \"01-JAN-24\", // Different date format\n    '<?xml version=\"1.0\"?><root>TEST</root>', // XML in CLOB\n  ],\n];\n","export class AttachmentValidationService {\n  validateAttachment(value, dataType, maxLength, attachments) {\n    if (!value || !attachments?.length) return null;\n\n    // Find matching file (case-insensitive)\n    const matchingFile = attachments.find((file) => file.name.toLowerCase() === value.toLowerCase());\n    if (!matchingFile) return null;\n\n    const fieldDataType = dataType.toUpperCase();\n\n    if (![\"BLOB\", \"CLOB\", \"VARCHAR\", \"VARCHAR2\", \"CHAR\"].includes(fieldDataType)) {\n      return null;\n    } else if ([\"VARCHAR\", \"VARCHAR2\", \"CHAR\"].includes(fieldDataType)) {\n      return this.handleVarcharType(matchingFile, maxLength);\n    } else if ([\"CLOB\"].includes(fieldDataType)) {\n      return this.handleClobType(matchingFile);\n    }\n  }\n\n  handleVarcharType(file, maxLength) {\n    if (file.type.includes(\"text\")) {\n      // For text files, use original content\n      const content = file.processedFormats.original;\n      if (content.length <= maxLength) {\n        return content;\n      }\n    } else {\n      // For base64/image/pdf, use base64 content\n      const content = file.processedFormats.base64;\n      if (content.length <= maxLength) {\n        return content;\n      }\n    }\n    console.warn(\"Attachment not fit to be attached, placing filename as placeholder\");\n    return null;\n  }\n\n  handleClobType(file) {\n    if (file.type.includes(\"text\")) {\n      return file.processedFormats.original;\n    }\n    return file.processedFormats.base64;\n  }\n}\n","import { ValueProcessorService } from \"./ValueProcessorService.js\";\nimport { oracleReservedWords } from \"../constants/Constants.js\";\nimport { AttachmentValidationService } from \"./AttachmentValidationService.js\";\n\nexport class QueryGenerationService {\n  constructor() {\n    this.ValueProcessorService = new ValueProcessorService();\n    this.attachmentValidationService = new AttachmentValidationService();\n  }\n\n  generateQuery(tableName, queryType, schemaData, inputData, attachments) {\n    // 1. Get field names from first row of input data\n    const fieldNames = inputData[0].map((name) => name.toLowerCase());\n\n    // 2. Get data rows (excluding header row)\n    const dataRows = inputData.slice(1).filter((row) => row.some((cell) => cell !== null && cell !== \"\"));\n\n    // 3. Map schema with field name as key\n    const schemaMap = new Map(schemaData.map((row) => [row[0].toLowerCase(), row]));\n\n    // 4. Process each row of data\n    const processedRows = dataRows.map((rowData, rowIndex) => {\n      try {\n        // For each field in the row\n        return fieldNames.map((fieldName, colIndex) => {\n          // Get the schema definition for this field\n          const schemaRow = schemaMap.get(fieldName.toLowerCase());\n\n          // Extract dataType and nullable from schema\n          const [, dataType, nullable] = schemaRow;\n          // Get the actual value from the data\n          let value = rowData[colIndex];\n\n          // Check if value matches any attachment\n          const attachmentValue = this.attachmentValidationService.validateAttachment(\n            value,\n            dataType,\n            this.getMaxLength(dataType),\n            attachments\n          );\n\n          // Use attachment value if found, otherwise use original value\n          value = attachmentValue !== null ? attachmentValue : value;\n\n          // Return formatted object\n          return {\n            fieldName,\n            formattedValue: this.ValueProcessorService.processValue(value, dataType, nullable, fieldName, tableName),\n          };\n        });\n      } catch (error) {\n        throw new Error(`Row ${rowIndex + 2}: ${error.message}`);\n      }\n    });\n\n    // 6. Find primary keys for MERGE statements\n    const primaryKeys = this.ValueProcessorService.findPrimaryKeys(schemaData, tableName);\n\n    // 7. Generate SQL based on query type\n    let query = `SET DEFINE OFF;\\n\\n`;\n\n    if (queryType === \"insert\") {\n      processedRows.forEach((processedFields) => {\n        query += this.generateInsertStatement(tableName, processedFields);\n        query += \"\\n\\n\";\n      });\n    } else {\n      processedRows.forEach((processedFields) => {\n        query += this.generateMergeStatement(tableName, processedFields, primaryKeys);\n        query += \"\\n\\n\";\n      });\n    }\n\n    // 8. Add select query to verify results\n    const selectQuery = this.generateSelectStatement(tableName, primaryKeys, processedRows);\n\n    if (selectQuery) {\n      query += selectQuery;\n    }\n\n    return query;\n  }\n\n  generateInsertStatement(tableName, processedFields) {\n    const fields = processedFields.map((f) => this.formatFieldName(f.fieldName));\n    const values = processedFields.map((f) => f.formattedValue);\n\n    return `INSERT INTO ${tableName} (${fields.join(\", \")}) \\nVALUES (${values.join(\", \")});`;\n  }\n\n  generateMergeStatement(tableName, processedFields, primaryKeys) {\n    // Format fields for SELECT part\n    const primaryKeysLowerCase = primaryKeys.map((pk) => pk.toLowerCase());\n    const selectFields = processedFields.map((f) => `\\n  ${f.formattedValue} AS ${this.formatFieldName(f.fieldName)}`).join(\",\");\n\n    // Format ON conditions for primary keys\n    const pkConditions = primaryKeysLowerCase\n      .map((pk) => `tgt.${this.formatFieldName(pk).toLowerCase()} = src.${this.formatFieldName(pk).toLowerCase()}`)\n      .join(\" AND \");\n\n    // Format UPDATE SET clause (excluding PKs and creation fields)\n    const updateFields = processedFields\n      .filter((f) => !primaryKeysLowerCase.includes(f.fieldName) && ![\"created_time\", \"created_by\"].includes(f.fieldName))\n      .map((f) => `  tgt.${this.formatFieldName(f.fieldName)} = src.${this.formatFieldName(f.fieldName)}`)\n      .join(\",\\n\");\n\n    // Format INSERT fields and values\n    const insertFields = processedFields.map((f) => this.formatFieldName(f.fieldName)).join(\", \");\n    const insertValues = processedFields.map((f) => `src.${this.formatFieldName(f.fieldName)}`).join(\", \");\n\n    let mergeStatement = `MERGE INTO ${tableName} tgt`;\n    mergeStatement += `\\nUSING (SELECT${selectFields}\\n  FROM DUAL) src`;\n    mergeStatement += `\\nON (${pkConditions})`;\n    mergeStatement += `\\nWHEN MATCHED THEN UPDATE SET\\n${updateFields}`;\n    mergeStatement += `\\nWHEN NOT MATCHED THEN INSERT (${insertFields})\\nVALUES (${insertValues});`;\n\n    return mergeStatement;\n  }\n\n  generateSelectStatement(tableName, primaryKeys, processedRows) {\n    if (primaryKeys.length === 0) return null;\n    if (processedRows.length === 0) return null;\n\n    // Collect formatted values for each primary key\n    const pkValueMap = new Map(primaryKeys.map((pk) => [pk.toLowerCase(), new Set()]));\n\n    // Go through each processed row to collect PK values\n    processedRows.forEach((row) => {\n      row.forEach((field) => {\n        if (pkValueMap.has(field.fieldName)) {\n          // Only add non-null values\n          if (field.formattedValue !== \"NULL\") {\n            pkValueMap.get(field.fieldName).add(field.formattedValue);\n          }\n        }\n      });\n    });\n\n    // Build WHERE conditions\n    const whereConditions = [];\n\n    pkValueMap.forEach((values, pkName) => {\n      if (values.size > 0) {\n        whereConditions.push(`${this.formatFieldName(pkName)} IN (${Array.from(values).join(\", \")})`);\n      }\n    });\n\n    // If no valid PK values found, return null\n    if (whereConditions.length === 0) return null;\n\n    let selectStatement = `\\nSELECT * FROM ${tableName} WHERE ${whereConditions.join(\" AND \")} ORDER BY created_time ASC;`;\n    selectStatement += `\\nSELECT ${primaryKeys\n      .map((pk) => pk.toLowerCase())\n      .join(\", \")}, updated_time FROM ${tableName} WHERE updated_time >= SYSDATE - INTERVAL '5' MINUTE;`;\n    return selectStatement;\n  }\n\n  formatFieldName(fieldName) {\n    return oracleReservedWords.has(fieldName.toLowerCase()) ? `\"${fieldName.toUpperCase()}\"` : fieldName;\n  }\n\n  getMaxLength(dataType) {\n    const match = dataType.match(/\\((\\d+)(?:\\s*\\w+)?\\)/);\n    return match ? parseInt(match[1]) : null;\n  }\n}\n","export class SchemaValidationService {\n  constructor() {}\n\n  validateSchema(schemaData) {\n    // Check for empty schema\n    if (schemaData.length === 0) {\n      throw new Error(\"Schema Validation Error:<br>Please fill in the schema (see the left panel).\");\n    }\n\n    // Track invalid entries\n    const invalidDataTypes = [];\n    const invalidNullableValues = [];\n\n    // Validate each row in the schema once\n    schemaData.forEach((row) => {\n      const [fieldName, dataType, nullable] = row;\n\n      // Validate data type\n      if (!this.isValidOracleDataType(dataType)) {\n        invalidDataTypes.push(`${dataType} (in field ${fieldName})`);\n      }\n\n      // Validate nullable values\n      if (!this.isValidNullableDataType(nullable)) {\n        invalidNullableValues.push(`${nullable} (in field ${fieldName})`);\n      }\n    });\n\n    // Build error message if any validations failed\n    if (invalidDataTypes.length > 0 || invalidNullableValues.length > 0) {\n      const errors = [];\n\n      if (invalidDataTypes.length > 0) {\n        errors.push(`Invalid Oracle SQL Data Types: ${invalidDataTypes.join(\", \")}`);\n      }\n\n      if (invalidNullableValues.length > 0) {\n        errors.push(`Invalid nullable values: ${invalidNullableValues.join(\", \")}. Must be 'Yes', 'No', or 'PK'`);\n      }\n\n      throw new Error(`Schema Validation Error:<br>${errors.join(\"<br>\")}`);\n    }\n\n    return true;\n  }\n\n  isValidOracleDataType(dataType) {\n    const validTypes = [\"NUMBER\", \"VARCHAR\", \"VARCHAR2\", \"DATE\", \"TIMESTAMP\", \"CHAR\", \"CLOB\", \"BLOB\"];\n    return validTypes.some((type) => dataType.toUpperCase().startsWith(type));\n  }\n\n  isValidNullableDataType(nullable) {\n    const validValues = [\"Yes\", \"No\", \"PK\", \"yes\", \"no\", \"pk\", \"Y\", \"N\", \"y\", \"n\"];\n    return validValues.includes(nullable);\n  }\n\n  matchSchemaWithData(schemaData, inputData) {\n    const hasSchemaData = schemaData.some((row) => row.some((cell) => cell !== null && cell !== \"\"));\n    const hasFieldNames = inputData[0]?.some((cell) => cell !== null && cell !== \"\");\n    const hasFirstDataRow = inputData[1]?.some((cell) => cell !== null && cell !== \"\");\n\n    if (!hasSchemaData || !hasFieldNames || !hasFirstDataRow) {\n      throw new Error(\"Incomplete data. Please fill in both schema and data sheets.\");\n    }\n\n    const schemaFieldNames = schemaData.map((row) => row[0].toLowerCase());\n    const inputFieldNames = inputData[0].map((field) => field?.toLowerCase());\n\n    // Check for empty field names in data input\n    const emptyColumnIndex = inputFieldNames.findIndex((field) => !field);\n    if (emptyColumnIndex !== -1) {\n      throw new Error(`Field Name Error:<br>Empty field name found in data input at column ${emptyColumnIndex + 1}`);\n    }\n\n    // Find mismatches in both directions\n    const missingInSchema = inputFieldNames.filter((field) => !schemaFieldNames.includes(field));\n    const missingInData = schemaFieldNames.filter((field) => !inputFieldNames.includes(field));\n\n    if (missingInSchema.length > 0 || missingInData.length > 0) {\n      const errors = [];\n      if (missingInSchema.length > 0) {\n        errors.push(`Fields in data but not in schema: ${missingInSchema.join(\", \")}`);\n      }\n      if (missingInData.length > 0) {\n        errors.push(`Fields in schema but not in data: ${missingInData.join(\", \")}`);\n      }\n      throw new Error(`Field Mismatch Error:<br>${errors.join(\"<br>\")}`);\n    }\n\n    return true;\n  }\n}\n\nexport function isDbeaverSchema(schemaData) {\n  if (schemaData[0][0] === \"Column Name\") {\n    return true;\n  }\n  return false;\n}\n","export class SQLSplitterService {\n  constructor() {\n    this.splitRegex = /\\s*;\\s*/g;\n    this.maxChunkSize = 90 * 1024; // 90 KB default chunk size\n  }\n\n  getByteSize(str) {\n    return new TextEncoder().encode(str).length;\n  }\n\n  generateValidationQuery(tableName) {\n    return `\\n\\nSELECT COUNT(*) FROM ${tableName} WHERE updated_time >= SYSDATE - INTERVAL '10' MINUTE;`;\n  }\n\n  cleanSql(sql) {\n    // Remove all SET DEFINE OFF statements and SELECT statements\n    let cleanedSql =\n      sql\n        .split(this.splitRegex)\n        .filter((stmt) => {\n          const trimmedStmt = stmt.trim().toLowerCase();\n          return !trimmedStmt.startsWith(\"select\") && !trimmedStmt.startsWith(\"set define off\");\n        })\n        .map((stmt) => stmt.trim())\n        .filter((stmt) => stmt) // Remove empty statements\n        .join(\";\\n\\n\") + \";\"; // Add semicolon after each statement and at the end\n\n    return cleanedSql;\n  }\n\n  splitSql(sql, tableName) {\n    const chunks = [];\n    let oversizedChunksCount = 0;\n    const defineOff = \"SET DEFINE OFF;\\n\\n\";\n    const validationQuery = this.generateValidationQuery(tableName);\n\n    // Clean the SQL first\n    const cleanedSql = this.cleanSql(sql);\n\n    // Split the SQL into individual statements\n    const statements = cleanedSql\n      .split(this.splitRegex)\n      .map((stmt) => stmt.trim())\n      .filter((stmt) => stmt);\n\n    let currentChunk = defineOff;\n    let currentSize = this.getByteSize(defineOff);\n    const validationSize = this.getByteSize(validationQuery);\n\n    for (const statement of statements) {\n      const statementSize = this.getByteSize(statement);\n\n      // If a single statement is larger than maxChunkSize, create a chunk with just this statement\n      if (statementSize > this.maxChunkSize) {\n        chunks.push(defineOff + statement + \";\" + validationQuery);\n        oversizedChunksCount++;\n        continue;\n      }\n\n      // If adding this statement would exceed maxChunkSize, start a new chunk\n      if (currentSize + statementSize + validationSize > this.maxChunkSize) {\n        if (currentChunk !== defineOff) {\n          chunks.push(currentChunk.trim() + \";\" + validationQuery);\n        }\n        currentChunk = defineOff + statement;\n        currentSize = this.getByteSize(defineOff) + statementSize;\n      } else {\n        // Add statement to current chunk\n        currentChunk = currentChunk === defineOff ? defineOff + statement : `${currentChunk};\\n\\n${statement}`;\n        currentSize += statementSize;\n      }\n    }\n\n    // Add the last chunk if it exists\n    if (currentChunk !== defineOff) {\n      chunks.push(currentChunk.trim() + \";\" + validationQuery);\n    }\n\n    return {\n      chunks,\n      oversizedChunksCount,\n    };\n  }\n}\n","export class AttachmentProcessorService {\n  constructor() {\n    this.attachmentsContainer = null;\n    this.fileContents = {};\n  }\n\n  // The business process will be processing the file\n  // based on its format, and returning it as three format for each file\n  // 1. original value (for txt, html, json)\n  // 2. base64 encoded value (for images, pdf)\n\n  async processAttachments(files) {\n    console.log(\"Processing attachments\");\n    const processedFiles = [];\n\n    for (const file of files) {\n      console.log(\"Processing file:\", file.name);\n      const sanitizedFileName = file.name.replace(/\\s+/g, \"_\");\n      const extension = sanitizedFileName.split(\".\").pop().toLowerCase();\n      const processedFile = {\n        name: sanitizedFileName,\n        type: file.type,\n        size: file.size,\n        processedFormats: {\n          original: null,\n          base64: null,\n          sizes: {\n            original: 0,\n            base64: 0,\n          },\n        },\n      };\n\n      try {\n        switch (extension) {\n          case \"jpg\":\n          case \"jpeg\":\n          case \"png\":\n          case \"pdf\":\n            await this.handleMediaFile(file, processedFile);\n            break;\n          case \"txt\":\n          case \"html\":\n          case \"json\":\n            await this.handleTextFile(file, processedFile);\n            break;\n          default:\n            console.warn(`Unsupported file type: ${extension}`);\n        }\n        processedFiles.push(processedFile);\n      } catch (error) {\n        console.error(`Error processing file ${file.name}:`, error);\n      }\n    }\n\n    return processedFiles;\n  }\n\n  async handleMediaFile(file, processedFile) {\n    // Read as base64\n    const base64Data = await this.readFileAs(file, \"dataURL\");\n    processedFile.processedFormats.base64 = base64Data;\n    processedFile.processedFormats.sizes.base64 = base64Data.length;\n  }\n\n  async handleTextFile(file, processedFile) {\n    const textContent = await this.readFileAs(file, \"text\");\n    processedFile.processedFormats.original = textContent;\n    processedFile.processedFormats.contentType = \"text/plain\";\n\n    const cleaned = textContent.trim();\n    if (!cleaned) {\n      processedFile.processedFormats.sizes.original = 0;\n      return;\n    }\n\n    // Check for data URI base64 pattern\n    if (cleaned.match(/^data:.*?;base64,/)) {\n      processedFile.type = \"text/base64\";\n      processedFile.processedFormats.contentType = \"text/base64\";\n      processedFile.processedFormats.base64 = cleaned;\n\n      // Extract and decode base64 content\n      const base64Content = cleaned.split(\",\")[1];\n      try {\n        const decoded = atob(base64Content);\n        processedFile.processedFormats.sizes.original = decoded.length;\n        processedFile.processedFormats.sizes.base64 = cleaned.length;\n      } catch (e) {\n        processedFile.processedFormats.sizes.original = new TextEncoder().encode(textContent).length;\n      }\n    } else {\n      processedFile.processedFormats.sizes.original = new TextEncoder().encode(textContent).length;\n    }\n  }\n\n  readFileAs(file, readAs) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = () => reject(new Error(\"Error reading file\"));\n\n      switch (readAs) {\n        case \"arrayBuffer\":\n          reader.readAsArrayBuffer(file);\n          break;\n        case \"dataURL\":\n          reader.readAsDataURL(file);\n          break;\n        case \"text\":\n          reader.readAsText(file);\n          break;\n      }\n    });\n  }\n}\n","export default \"<div class=\\\"tool-container quick-query-tool-container\\\">\\n    <div class=\\\"quick-query-content\\\">\\n        <div class=\\\"content-a\\\">\\n            <div class=\\\"quick-query-left-panel\\\">\\n                <div class=\\\"button-group\\\">\\n                    <select id=\\\"queryTypeSelect\\\">\\n                        <option value=\\\"merge\\\">MERGE INTO</option>\\n                        <option value=\\\"insert\\\">INSERT INTO</option>\\n                    </select>\\n                    <input type=\\\"text\\\" id=\\\"tableNameInput\\\" placeholder=\\\"schema_name.table_name\\\"\\n                        value=\\\"schema_name.table_name\\\">\\n                </div>\\n                <div class=\\\"button-group quick-query-left-controls\\\">\\n                    <button id=\\\"showSavedSchemas\\\">Manage Saved Schemas</button>\\n                    <button id=\\\"addNewSchemaRow\\\">Add row</button>\\n                    <button id=\\\"removeLastSchemaRow\\\">Remove last row</button>\\n                    <button id=\\\"clearAll\\\">Clear All</button>\\n                    <button id=\\\"generateQuery\\\">Generate Query</button>\\n                </div>\\n\\n                <div id=\\\"spreadsheet-schema\\\"></div>\\n\\n                <div id=\\\"attachments-container\\\" class=\\\"attachment-container-hide\\\">\\n                    <p>Drag and drop attachments here or click to select. Supports: txt, jpg, png ,\\n                        html, pdf and json</p>\\n                    <input type=\\\"file\\\" id=\\\"attachmentsInput\\\" accept=\\\".txt, .jpg, .jpeg, .png , .html, .pdf, .json\\\"\\n                        multiple style=\\\"display: none;\\\" />\\n                </div>\\n                <div id=\\\"files-container\\\"></div>\\n\\n                <div id=\\\"guideContainer\\\">\\n                </div>\\n            </div>\\n            <div class=\\\"quick-query-right-panel\\\">\\n                <div class=\\\"button-group quick-query-right-controls\\\">\\n                    <button id=\\\"toggleWordWrap\\\">Word Wrap: Off</button>\\n                    <button id=\\\"copySQL\\\">Copy SQL</button>\\n                    <button id=\\\"splitSQL\\\">Split SQL</button>\\n                    <button id=\\\"downloadSQL\\\">Download SQL</button>\\n                </div>\\n                <div id=\\\"warningMessages\\\"></div>\\n                <div id=\\\"errorMessages\\\"></div>\\n                <div id=\\\"queryEditor\\\" class=\\\"quick-query-content-area\\\"></div>\\n            </div>\\n        </div>\\n        <div class=\\\"content-b\\\">\\n            <div class=\\\"button-group\\\">\\n                <h3>Data Input</h3>\\n                <p>Note: First row of data must be field names.</p>\\n                <div class=\\\"simulate-buttons\\\">\\n                    <button id=\\\"addFieldNames\\\">Add field names from schema</button>\\n                    <button id=\\\"addDataRow\\\">Add Row</button>\\n                    <button id=\\\"removeDataRow\\\">Remove Last Row</button>\\n                    <button id=\\\"clearData\\\">Clear Data</button>\\n                </div>\\n            </div>\\n            <div id=\\\"spreadsheet-data\\\"></div>\\n        </div>\\n    </div>\\n</div>\\n\\n<div id=\\\"schemaOverlay\\\" class=\\\"schema-overlay hidden\\\">\\n    <div class=\\\"schema-modal\\\">\\n        <div class=\\\"schema-modal-header\\\">\\n            <h3>Saved Schemas</h3>\\n            <div class=\\\"schema-modal-actions\\\">\\n                <button id=\\\"clearAllSchemas\\\" class=\\\"action-button\\\">Clear All</button>\\n                <button id=\\\"exportSchemas\\\" class=\\\"action-button\\\">Export</button>\\n                <button id=\\\"importSchemas\\\" class=\\\"action-button\\\">Import</button>\\n                <button id=\\\"closeSchemaOverlay\\\" class=\\\"overlay-close-button\\\">&times;</button>\\n            </div>\\n            <input type=\\\"file\\\" id=\\\"schemaFileInput\\\" accept=\\\".json\\\" style=\\\"display: none;\\\">\\n        </div>\\n        <div class=\\\"schema-modal-content\\\">\\n            <div id=\\\"savedSchemasList\\\"></div>\\n        </div>\\n    </div>\\n</div>\\n\\n<div id=\\\"fileViewerOverlay\\\" class=\\\"file-viewer-overlay hidden\\\">\\n    <div class=\\\"file-viewer-modal\\\">\\n        <div class=\\\"file-viewer-header\\\">\\n            <h3 id=\\\"fileViewerTitle\\\">File Name</h3>\\n            <button id=\\\"closeFileViewer\\\" class=\\\"overlay-close-button\\\">&times;</button>\\n        </div>\\n\\n        <div class=\\\"file-viewer-tabs\\\">\\n            <button class=\\\"tab-button active\\\" data-tab=\\\"original\\\">Original</button>\\n            <button class=\\\"tab-button\\\" data-tab=\\\"processed\\\">Processed</button>\\n        </div>\\n\\n        <div class=\\\"file-viewer-content\\\">\\n            <div id=\\\"originalContent\\\" class=\\\"tab-content active\\\">\\n                <!-- Content will be dynamically inserted -->\\n            </div>\\n            <div id=\\\"processedContent\\\" class=\\\"tab-content\\\">\\n                <!-- Content will be dynamically inserted -->\\n            </div>\\n        </div>\\n\\n        <div class=\\\"file-viewer-metadata\\\">\\n            <div id=\\\"fileMetadata\\\">\\n                <div class=\\\"metadata-grid\\\">\\n                    <div id=\\\"fileType\\\">File Type: -</div>\\n                    <div id=\\\"fileSize\\\">Size: -</div>\\n                    <div id=\\\"base64Size\\\" class=\\\"hidden\\\">Base64 Size: -</div>\\n                    <div id=\\\"dimensions\\\" class=\\\"hidden\\\">Dimensions: -</div>\\n                    <div id=\\\"lineCount\\\" class=\\\"hidden\\\">Lines: -</div>\\n                    <div id=\\\"charCount\\\" class=\\\"hidden\\\">Characters: -</div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\"","export default \"<button id=\\\"toggleGuide\\\" class=\\\"toggle-guide\\\">Tutorial & Simulation</button>\\n<div id=\\\"guide\\\" class=\\\"guide-content hidden\\\">\\n    <h4>Quick Guide:</h4>\\n    <ul>\\n        <li>Copy and paste your database schema.</li>\\n        <li>Use \\\"PK\\\" in the Nullable field to indicate Primary Keys. If no \\\"PK\\\" is stated, default\\n            PK would be field[0].</li>\\n        <li>You can have multiple primary keys.</li>\\n        <li>Fill in the Data Input with your values.</li>\\n        <li>Click buttons below to simulate the query generation.</li>\\n    </ul>\\n    <div class=\\\"button-group simulate-buttons\\\">\\n        <button id=\\\"simulationFillSchemaButton\\\" class=\\\"simulate-button\\\">1. Fill Schema</button>\\n        <p>&rarr;</p>\\n        <button id=\\\"simulationFillDataButton\\\" class=\\\"simulate-button\\\">2. Fill Data</button>\\n        <p>&rarr;</p>\\n        <button id=\\\"simulationGenerateQueryButton\\\" class=\\\"simulate-button\\\">3. Generate\\n            Query</button>\\n    </div>\\n</div>\"","import { copyToClipboard } from \"../../utils/buttons.js\";\nimport { LocalStorageService } from \"./services/LocalStorageService.js\";\nimport { QueryGenerationService } from \"./services/QueryGenerationService.js\";\nimport { SchemaValidationService, isDbeaverSchema } from \"./services/SchemaValidationService.js\";\nimport { SQLSplitterService } from \"./services/SQLSplitterService.js\";\nimport { DependencyLoader } from \"../../utils/dependencyLoader.js\";\nimport { sampleSchema1, sampleData1 } from \"./constants/Constants.js\";\nimport { initialSchemaTableSpecification, initialDataTableSpecification } from \"./constants/Constants.js\";\nimport { AttachmentProcessorService } from \"./services/AttachmentProcessorService.js\";\n\nimport mainTemplate from \"./templates/main.html?raw\";\nimport tutorialTemplate from \"./templates/tutorial.html?raw\";\n\nexport class QuickQueryUI {\n  constructor(container) {\n    this.container = container;\n    this.editor = null;\n    this.schemaTable = null;\n    this.dataTable = null;\n    this.elements = {};\n    this.localStorageService = new LocalStorageService();\n    this.schemaValidationService = new SchemaValidationService();\n    this.queryGenerationService = new QueryGenerationService();\n    this.attachmentProcessorService = new AttachmentProcessorService();\n    this.sqlSplitterService = new SQLSplitterService();\n    this.isGuideActive = false;\n    this.processedFiles = [];\n\n    // Initialize search state\n    this.searchState = {\n      selectedIndex: -1,\n      visibleItems: [],\n    };\n\n    this.init();\n  }\n\n  async init() {\n    try {\n      await this.loadHtmlTemplates();\n      this.bindElements();\n      this.clearError();\n      await DependencyLoader.load(\"handsontable\");\n      await DependencyLoader.load(\"codemirror\");\n      await this.initializeComponents();\n      this.setupEventListeners();\n      this.setupTableNameSearch();\n      this.loadMostRecentSchema();\n    } catch (error) {\n      console.error(\"Failed to initialize Quick Query:\", error);\n      if (this.elements.errorMessages) {\n        console.log(error.message);\n      } else {\n        console.error(\"Error elements not bound yet:\", error);\n        this.container.innerHTML = `<div class=\"error-message\">\"Failure to load, please contact app's developer.\"</div>`;\n      }\n      throw error;\n    }\n  }\n\n  async loadHtmlTemplates() {\n    try {\n      // Set main template\n      this.container.innerHTML = mainTemplate;\n\n      // Wait for main template to be loaded in DOM\n      await new Promise((resolve) => setTimeout(resolve, 0));\n\n      // If guide is active, load tutorial template\n      if (this.isGuideActive) {\n        const guideContainer = document.getElementById(\"guideContainer\");\n        if (!guideContainer) {\n          throw new Error(\"Guide container element not found\");\n        }\n        guideContainer.innerHTML = tutorialTemplate;\n\n        // Wait for tutorial template to be loaded in DOM\n        await new Promise((resolve) => setTimeout(resolve, 0));\n      }\n    } catch (error) {\n      console.error(\"Error loading HTML templates:\", error);\n      throw error;\n    }\n  }\n\n  async initializeComponents() {\n    try {\n      this.initializeSpreadsheets();\n      this.initializeEditor();\n      this.elements.filesContainer.classList.add(\"hidden\");\n      this.elements.attachmentsContainer.classList.remove(\"hidden\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  bindElements() {\n    this.elements = {\n      // Input elements\n      tableNameInput: document.getElementById(\"tableNameInput\"),\n      queryTypeSelect: document.getElementById(\"queryTypeSelect\"),\n      schemaFileInput: document.getElementById(\"schemaFileInput\"),\n\n      // Schema editor elements\n      schemaContainer: document.getElementById(\"spreadsheet-schema\"),\n      dataContainer: document.getElementById(\"spreadsheet-data\"),\n\n      // Attachments components\n      attachmentsContainer: document.getElementById(\"attachments-container\"),\n      attachmentsInput: document.getElementById(\"attachmentsInput\"),\n      filesContainer: document.getElementById(\"files-container\"),\n\n      // Message and display elements\n      errorMessages: document.getElementById(\"errorMessages\"),\n      warningMessages: document.getElementById(\"warningMessages\"),\n      guide: document.getElementById(\"guide\"),\n\n      // Schema overlay elements\n      schemaOverlay: document.getElementById(\"schemaOverlay\"),\n      savedSchemasList: document.getElementById(\"savedSchemasList\"),\n\n      // Buttons\n      toggleGuideButton: document.getElementById(\"toggleGuide\"),\n      guideContent: document.getElementById(\"guide\"),\n      toggleWordWrapButton: document.getElementById(\"toggleWordWrap\"),\n      showSavedSchemasButton: document.getElementById(\"showSavedSchemas\"),\n      closeSchemaOverlayButton: document.getElementById(\"closeSchemaOverlay\"),\n      exportSchemasButton: document.getElementById(\"exportSchemas\"),\n      clearAllSchemasButton: document.getElementById(\"clearAllSchemas\"),\n      importSchemasButton: document.getElementById(\"importSchemas\"),\n      splitSQLButton: document.getElementById(\"splitSQL\"),\n\n      // Container elements\n      tableSearchContainer: null,\n      dropdownContainer: null,\n\n      // Attachment Preview Overlay Elements\n      filePreviewOverlay: document.getElementById(\"fileViewerOverlay\"),\n      closeFilePreviewOverlayButton: document.getElementById(\"closeFileViewer\"),\n    };\n  }\n\n  setupEventListeners() {\n    const eventMap = {\n      // Input elements\n      tableNameInput: {\n        input: (e) => this.handleSearchInput(e),\n        keydown: (e) => this.handleSearchKeyDown(e),\n      },\n      queryTypeSelect: {\n        change: () => this.handleGenerateQuery(),\n      },\n      schemaFileInput: {\n        change: (e) => this.handleSchemaFileInput(e),\n      },\n      // Query related buttons\n      generateQuery: {\n        click: () => this.handleGenerateQuery(),\n      },\n      copySQL: {\n        click: (e) => copyToClipboard(this.editor.getValue(), e.target),\n      },\n      clearAll: {\n        click: () => this.handleClearAll(),\n      },\n      downloadSQL: {\n        click: () => this.handleDownloadSql(),\n      },\n      toggleWordWrapButton: {\n        click: () => this.handleToggleWordWrap(),\n      },\n      splitSQLButton: {\n        click: () => this.handleSplitSql(),\n      },\n\n      // Attachments related\n      attachmentsContainer: {\n        click: () => this.elements.attachmentsInput.click(),\n        dragOver: (e) => this.handleDragOver(e),\n        dragLeave: (e) => this.handleDragLeave(e),\n        drop: (e) => this.handleDrop(e),\n      },\n      attachmentsInput: {\n        change: (e) => this.handleAttachmentsInput(e),\n      },\n\n      // Guide related buttons\n      toggleGuideButton: {\n        click: () => this.handleToggleGuide(),\n      },\n      simulationFillSchemaButton: {\n        click: () => this.handleSimulationFillSchema(),\n      },\n      simulationFillDataButton: {\n        click: () => this.handleSimulationFillData(),\n      },\n      simulationGenerateQueryButton: {\n        click: () => this.handleSimulationGenerateQuery(),\n      },\n\n      // Overlay handlers\n      schemaOverlay: {\n        click: (e) => {\n          if (e.target === this.elements.schemaOverlay) {\n            this.elements.schemaOverlay.classList.add(\"hidden\");\n          }\n        },\n      },\n      filePreviewOverlay: {\n        click: (e) => {\n          if (e.target === this.elements.filePreviewOverlay) {\n            this.elements.filePreviewOverlay.classList.add(\"hidden\");\n          }\n        },\n      },\n\n      // Data related buttons\n      addFieldNames: {\n        click: () => this.handleAddFieldNames(),\n      },\n      addDataRow: {\n        click: () => this.handleAddDataRow(),\n      },\n      removeDataRow: {\n        click: () => this.handleRemoveDataRow(),\n      },\n      clearData: {\n        click: () => this.handleClearData(),\n      },\n\n      // Schema related buttons\n      addNewSchemaRow: {\n        click: () => this.handleAddNewSchemaRow(),\n      },\n      removeLastSchemaRow: {\n        click: () => this.handleRemoveLastSchemaRow(),\n      },\n      showSavedSchemasButton: {\n        click: () => {\n          this.elements.schemaOverlay.classList.remove(\"hidden\");\n          this.updateSavedSchemasList();\n        },\n      },\n      closeSchemaOverlayButton: {\n        click: () => this.elements.schemaOverlay.classList.add(\"hidden\"),\n      },\n      exportSchemasButton: {\n        click: () => this.handleExportSchemas(),\n      },\n      clearAllSchemasButton: {\n        click: () => this.handleClearAllSchemas(),\n      },\n      importSchemasButton: {\n        click: () => this.elements.schemaFileInput.click(),\n      },\n    };\n\n    // Bind all event handlers\n    Object.entries(eventMap).forEach(([elementId, events]) => {\n      const element = this.elements[elementId] || document.getElementById(elementId);\n      if (element) {\n        Object.entries(events).forEach(([event, handler]) => {\n          element.addEventListener(event, handler);\n        });\n      } else {\n        console.warn(`Element '${elementId}' not found`);\n      }\n    });\n  }\n\n  initializeEditor() {\n    this.editor = CodeMirror(document.getElementById(\"queryEditor\"), {\n      mode: \"text/x-sql\",\n      theme: \"material\",\n      lineNumbers: true,\n      readOnly: false,\n      viewportMargin: Infinity,\n      lineWrapping: false,\n    });\n\n    setTimeout(() => this.editor.refresh(), 0);\n  }\n\n  initializeSpreadsheets() {\n    const schemaTableConfig = {\n      ...initialSchemaTableSpecification,\n      afterChange: (changes) => {\n        if (changes) {\n          this.updateDataSpreadsheet();\n          this.handleAddFieldNames();\n        }\n      },\n      afterGetColHeader: function (col, TH) {\n        const header = TH.querySelector(\".colHeader\");\n        if (header) {\n          header.style.fontWeight = \"bold\";\n        }\n      },\n    };\n    this.schemaTable = new Handsontable(this.elements.schemaContainer, schemaTableConfig);\n\n    const dataTableConfig = {\n      ...initialDataTableSpecification,\n      afterChange: (changes, source) => {\n        if (!changes || source === \"loadData\") return; // Skip if no changes or if change is from loading data\n\n        const tableName = this.elements.tableNameInput.value.trim();\n        if (!tableName) return; // Skip if no table name\n\n        // Only save if there are actual changes\n        if (changes.length > 0) {\n          const currentData = this.dataTable.getData();\n          this.localStorageService.updateTableData(tableName, currentData);\n        }\n      },\n    };\n\n    this.dataTable = new Handsontable(this.elements.dataContainer, dataTableConfig);\n  }\n\n  updateDataSpreadsheet() {\n    const schemaData = this.schemaTable.getData().filter((row) => row[0]);\n    const columnCount = schemaData.length;\n    const currentData = this.dataTable.getData();\n\n    const columnHeaders = Array.from({ length: columnCount }, (_, i) => String.fromCharCode(65 + i));\n\n    this.dataTable.updateSettings({\n      colHeaders: columnHeaders,\n      columns: Array(columnCount).fill({ type: \"text\" }),\n      minCols: columnCount,\n    });\n\n    if (currentData.length < 2) {\n      const newData = [Array(columnCount).fill(null), Array(columnCount).fill(null)];\n      this.dataTable.loadData(newData);\n    } else {\n      const newData = currentData.map((row) => {\n        return row.slice(0, columnCount).concat(Array(Math.max(0, columnCount - row.length)).fill(null));\n      });\n      this.dataTable.loadData(newData);\n    }\n  }\n\n  // Error handling methods\n  showError(message) {\n    if (this.elements.errorMessages) {\n      this.elements.errorMessages.innerHTML = message;\n      this.elements.errorMessages.style.display = \"block\";\n    }\n  }\n\n  showSuccess(message) {\n    if (this.elements.warningMessages) {\n      this.elements.errorMessages.innerHTML = message;\n      this.elements.errorMessages.style.display = \"block\";\n      this.elements.errorMessages.style.color = \"green\";\n    }\n  }\n\n  clearError() {\n    if (this.elements.errorMessages && this.elements.warningMessages) {\n      this.elements.errorMessages.textContent = \"\";\n      this.elements.warningMessages.textContent = \"\";\n      this.elements.errorMessages.style.display = \"none\";\n      this.elements.warningMessages.style.display = \"none\";\n    }\n  }\n\n  // Event Handlers\n  handleGenerateQuery() {\n    try {\n      const tableName = this.elements.tableNameInput.value.trim();\n      const queryType = this.elements.queryTypeSelect.value;\n\n      const schemaData = this.schemaTable.getData().filter((row) => row[0]);\n      const inputData = this.dataTable.getData();\n\n      if (!tableName) {\n        throw new Error(\"Please fill in schema_name.table_name.\");\n      }\n\n      if (!tableName.includes(\".\")) {\n        throw new Error(\"Table name format should be 'schema_name.table_name'.\");\n      }\n\n      if (isDbeaverSchema(schemaData)) {\n        this.adjustDbeaverSchema(schemaData);\n        throw new Error(\"Schema data adjusted from DBeaver to SQL Developer format. Please refill the data sheet.\");\n      }\n\n      this.schemaValidationService.validateSchema(schemaData);\n      this.schemaValidationService.matchSchemaWithData(schemaData, inputData);\n\n      this.localStorageService.saveSchema(tableName, schemaData, inputData);\n\n      const query = this.queryGenerationService.generateQuery(tableName, queryType, schemaData, inputData, this.processedFiles);\n\n      this.editor.setValue(query);\n      this.clearError();\n    } catch (error) {\n      this.showError(error.message);\n      this.editor.setValue(\"\");\n    }\n  }\n\n  handleClearAll() {\n    this.elements.tableNameInput.value = \"\";\n\n    if (this.schemaTable) {\n      this.schemaTable.updateSettings({\n        data: [[\"\", \"\", \"\", \"\"]],\n        colHeaders: [\"Field Name\", \"Data Type\", \"Nullable/PK\", \"Default\", \"Field Order\", \"Comments\"],\n      });\n    }\n\n    if (this.dataTable) {\n      this.dataTable.updateSettings({\n        data: [[], []],\n        colHeaders: true,\n        minCols: 1,\n      });\n    }\n\n    if (this.editor) {\n      this.editor.setValue(\"\");\n    }\n\n    this.clearError();\n    this.elements.queryTypeSelect.value = \"merge\";\n  }\n\n  handleDownloadSql() {\n    const sql = this.editor.getValue();\n    if (!sql) {\n      this.showError(\"No SQL to download. Please generate a query first.\");\n      return;\n    }\n\n    let tableName = this.elements.tableNameInput.value.trim();\n    const sanitizedTableName = tableName.replace(/[^a-z0-9_.]/gi, \"_\").toUpperCase();\n    const filename = `${sanitizedTableName}.sql`;\n\n    const blob = new Blob([sql], { type: \"text/plain\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }\n\n  handleSplitSql() {\n    const sql = this.editor.getValue();\n    const tableName = this.elements.tableNameInput.value.trim();\n\n    if (!sql) {\n      this.showError(\"No SQL to split. Please generate a query first.\");\n      return;\n    }\n\n    if (!tableName) {\n      this.showError(\"Please fill in schema_name.table_name.\");\n      return;\n    }\n\n    if (!tableName.includes(\".\")) {\n      this.showError(\"Table name format should be 'schema_name.table_name'.\");\n      return;\n    }\n\n    const splitButton = this.elements.splitSQLButton;\n    const originalText = splitButton.textContent;\n    const originalColor = splitButton.style.backgroundColor;\n\n    try {\n      splitButton.textContent = \"Processing...\";\n      splitButton.style.backgroundColor = \"red\";\n      splitButton.disabled = true;\n\n      const { chunks, oversizedChunksCount } = this.sqlSplitterService.splitSql(sql, tableName);\n\n      if (chunks.length === 0) {\n        throw new Error(\"No valid SQL statements found after splitting.\");\n      }\n\n      const zip = new JSZip();\n      const baseFileName = tableName.replace(/[^a-z0-9_.]/gi, \"_\").toUpperCase();\n\n      chunks.forEach((chunk, index) => {\n        const paddedIndex = String(index + 1).padStart(2, \"0\");\n        const chunkFileName = `${paddedIndex}_${baseFileName}.sql`;\n        zip.file(chunkFileName, chunk);\n      });\n\n      splitButton.textContent = \"Downloading...\";\n\n      zip.generateAsync({ type: \"blob\" }).then((content) => {\n        const url = URL.createObjectURL(content);\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = `${baseFileName}_split.zip`;\n\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n\n        this.showSuccess(\n          `SQL query split into ${chunks.length} chunks. ${oversizedChunksCount} chunk(s) exceed ${Math.floor(\n            this.sqlSplitterService.maxChunkSize / 1024\n          )} KB.`\n        );\n      });\n    } catch (error) {\n      this.showError(`Failed to split SQL: ${error.message}`);\n    } finally {\n      setTimeout(() => {\n        splitButton.textContent = originalText;\n        splitButton.style.backgroundColor = originalColor;\n        splitButton.disabled = false;\n      }, 1000);\n    }\n  }\n\n  handleToggleWordWrap() {\n    const wordWrapButton = document.getElementById(\"toggleWordWrap\");\n    const currentState = this.editor.getOption(\"lineWrapping\");\n    const newState = !currentState;\n\n    this.editor.setOption(\"lineWrapping\", newState);\n    wordWrapButton.textContent = `Word Wrap: ${newState ? \"On\" : \"Off\"}`;\n    this.editor.refresh();\n  }\n\n  handleToggleGuide() {\n    if (this.elements.guideContent.classList.contains(\"hidden\")) {\n      this.elements.guideContent.classList.remove(\"hidden\");\n      this.elements.toggleGuideButton.textContent = \"Hide\";\n    } else {\n      this.elements.guideContent.classList.add(\"hidden\");\n      this.elements.toggleGuideButton.textContent = \"Tutorial & Simulation\";\n    }\n  }\n\n  handleSimulationFillSchema() {\n    this.elements.tableNameInput.value = \"schema_name.table_name\";\n    this.schemaTable.loadData(sampleSchema1);\n  }\n\n  handleSimulationFillData() {\n    this.dataTable.loadData(sampleData1);\n    this.updateDataSpreadsheet();\n  }\n\n  handleSimulationGenerateQuery() {\n    this.handleGenerateQuery();\n    this.handleToggleGuide();\n  }\n\n  handleAddFieldNames() {\n    const schemaData = this.schemaTable.getData().filter((row) => row[0]);\n    const fieldNames = schemaData.map((row) => row[0]);\n    const currentData = this.dataTable.getData();\n\n    if (currentData.length > 0) {\n      currentData[0] = fieldNames;\n    } else {\n      currentData.push(fieldNames);\n    }\n\n    if (currentData.length < 2) {\n      currentData.push(Array(fieldNames.length).fill(null));\n    }\n\n    this.dataTable.loadData(currentData);\n  }\n\n  handleAddDataRow() {\n    const currentData = this.dataTable.getData();\n    const schemaData = this.schemaTable.getData().filter((row) => row[0]);\n    const columnCount = schemaData.length;\n    const newRow = Array(columnCount).fill(null);\n    const newData = [...currentData, newRow];\n    this.dataTable.loadData(newData);\n  }\n\n  handleRemoveDataRow() {\n    const currentData = this.dataTable.getData();\n    const newData = currentData.slice(0, -1);\n    this.dataTable.loadData(newData);\n  }\n\n  handleClearData() {\n    const schemaData = this.schemaTable.getData().filter((row) => row[0]);\n    const fieldNames = schemaData.map((row) => row[0]);\n    const newData = [fieldNames, Array(fieldNames.length).fill(null)];\n\n    this.dataTable.loadData(newData);\n  }\n\n  handleAddNewSchemaRow() {\n    const currentData = this.schemaTable.getData();\n    const newRow = Array(6).fill(null);\n    const newData = [...currentData, newRow];\n    this.schemaTable.loadData(newData);\n  }\n\n  handleRemoveLastSchemaRow() {\n    const currentData = this.schemaTable.getData();\n    const newData = currentData.slice(0, -1);\n    this.schemaTable.loadData(newData);\n  }\n\n  handleClearAllSchemas() {\n    const allTables = this.localStorageService.getAllTables();\n    if (allTables.length === 0) {\n      this.showError(\"No schemas to clear\");\n      return;\n    }\n\n    if (!confirm(\"Are you sure you want to clear all saved schemas? This cannot be undone.\")) {\n      return;\n    }\n\n    const schemaCleared = this.localStorageService.clearAllSchemas();\n    if (schemaCleared) {\n      this.showSuccess(\"All saved schemas have been cleared\");\n      this.elements.schemaOverlay.classList.add(\"hidden\");\n    } else {\n      this.showError(\"Failed to clear all saved schemas\");\n    }\n  }\n\n  // Schema management methods\n  updateSavedSchemasList() {\n    const allTables = this.localStorageService.getAllTables();\n\n    if (allTables.length === 0) {\n      this.elements.savedSchemasList.innerHTML = '<div class=\"no-schemas\">No saved schemas</div>';\n      return;\n    }\n\n    const groupedTables = allTables.reduce((groups, table) => {\n      if (!groups[table.schemaName]) {\n        groups[table.schemaName] = [];\n      }\n      groups[table.schemaName].push(table);\n      return groups;\n    }, {});\n\n    this.elements.savedSchemasList.innerHTML = \"\";\n\n    Object.entries(groupedTables).forEach(([schemaName, tables]) => {\n      const groupDiv = document.createElement(\"div\");\n      groupDiv.className = \"schema-group\";\n\n      const headerDiv = document.createElement(\"div\");\n      headerDiv.className = \"schema-group-header\";\n      headerDiv.textContent = schemaName;\n      groupDiv.appendChild(headerDiv);\n\n      tables.forEach((table) => {\n        const itemDiv = document.createElement(\"div\");\n        itemDiv.className = \"schema-item\";\n\n        const infoDiv = document.createElement(\"div\");\n        infoDiv.className = \"schema-info\";\n\n        const nameDiv = document.createElement(\"div\");\n        nameDiv.className = \"schema-name\";\n        nameDiv.textContent = table.tableName;\n\n        const timestampDiv = document.createElement(\"div\");\n        timestampDiv.className = \"schema-timestamp\";\n        timestampDiv.textContent = new Date(table.timestamp).toLocaleString();\n\n        infoDiv.appendChild(nameDiv);\n        infoDiv.appendChild(timestampDiv);\n\n        const actionsDiv = document.createElement(\"div\");\n        actionsDiv.className = \"schema-actions\";\n\n        const loadBtn = document.createElement(\"button\");\n        loadBtn.textContent = \"Load\";\n        loadBtn.addEventListener(\"click\", () => this.handleLoadSchema(table.fullName));\n\n        const deleteBtn = document.createElement(\"button\");\n        deleteBtn.textContent = \"Delete\";\n        deleteBtn.addEventListener(\"click\", () => this.handleDeleteSchema(table.fullName));\n\n        actionsDiv.appendChild(loadBtn);\n        actionsDiv.appendChild(deleteBtn);\n\n        itemDiv.appendChild(infoDiv);\n        itemDiv.appendChild(actionsDiv);\n        groupDiv.appendChild(itemDiv);\n      });\n\n      this.elements.savedSchemasList.appendChild(groupDiv);\n    });\n  }\n\n  handleLoadSchema(fullName) {\n    const result = this.localStorageService.loadSchema(fullName, true);\n    if (result) {\n      this.elements.tableNameInput.value = fullName;\n      this.schemaTable.loadData(result.schema);\n      this.updateDataSpreadsheet();\n\n      // Load cached data if available\n      if (result.data) {\n        this.dataTable.loadData(result.data);\n      } else {\n        this.handleAddFieldNames();\n        this.handleClearData();\n      }\n\n      this.elements.schemaOverlay.classList.add(\"hidden\");\n      this.clearError();\n    } else {\n      this.showError(`Failed to load schema for ${fullName}`);\n    }\n  }\n\n  handleDeleteSchema(fullName) {\n    if (confirm(`Delete schema for ${fullName}?`)) {\n      const deleted = this.localStorageService.deleteSchema(fullName);\n      if (deleted) {\n        this.updateSavedSchemasList();\n\n        const currentTable = this.elements.tableNameInput.value;\n        if (currentTable === fullName) {\n          this.handleClearAll();\n        }\n      } else {\n        this.showError(`Failed to delete schema for ${fullName}`);\n      }\n    }\n  }\n\n  handleExportSchemas() {\n    const allTables = this.localStorageService.getAllTables();\n    if (allTables.length === 0) {\n      this.showError(\"No schemas to export\");\n      return;\n    }\n\n    const exportData = {};\n    allTables.forEach((table) => {\n      const schema = this.localStorageService.loadSchema(table.fullName);\n      if (schema) {\n        if (!exportData[table.schemaName]) {\n          exportData[table.schemaName] = {};\n        }\n        exportData[table.schemaName][table.tableName] = schema;\n      }\n    });\n\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n      type: \"application/json\",\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"quick_query_saved_schemas.json\";\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }\n\n  setupTableNameSearch() {\n    const tableNameInput = this.elements.tableNameInput;\n\n    // Disable browser's default suggestions\n    tableNameInput.setAttribute(\"autocomplete\", \"off\");\n    tableNameInput.setAttribute(\"autocorrect\", \"off\");\n    tableNameInput.setAttribute(\"autocapitalize\", \"off\");\n    tableNameInput.setAttribute(\"spellcheck\", \"false\");\n\n    // Create a container div and wrap it around the input\n    const container = document.createElement(\"div\");\n    container.className = \"table-search-container\";\n    tableNameInput.parentNode.insertBefore(container, tableNameInput);\n    container.appendChild(tableNameInput);\n\n    // Create dropdown container\n    const dropdownContainer = document.createElement(\"div\");\n    dropdownContainer.className = \"table-search-dropdown\";\n    dropdownContainer.style.display = \"none\";\n    container.appendChild(dropdownContainer);\n\n    // Store containers in elements\n    this.elements.tableSearchContainer = container;\n    this.elements.dropdownContainer = dropdownContainer;\n\n    this.setupSearchEventListeners(container, dropdownContainer, tableNameInput);\n  }\n\n  setupSearchEventListeners(container, dropdownContainer, tableNameInput) {\n    // Event Listeners\n    tableNameInput.addEventListener(\"input\", (e) => this.handleSearchInput(e));\n    tableNameInput.addEventListener(\"keydown\", (e) => this.handleSearchKeyDown(e));\n\n    // Close dropdown when clicking outside\n    document.addEventListener(\"click\", (event) => {\n      if (!container.contains(event.target)) {\n        dropdownContainer.style.display = \"none\";\n        this.searchState.selectedIndex = -1;\n      }\n    });\n  }\n\n  handleSearchInput(event) {\n    const input = event.target.value.trim();\n    this.elements.tableNameInput.style.borderColor = \"\";\n\n    if (!input) {\n      const results = this.localStorageService.searchSavedSchemas(\"\").slice(0, 7);\n      this.showSearchDropdown(results);\n      return;\n    }\n\n    const parts = input.split(\".\");\n    if (\n      !this.localStorageService.validateOracleName(parts[0], \"schema\") ||\n      !this.localStorageService.validateOracleName(parts[1], \"table\")\n    ) {\n      return;\n    }\n\n    const results = this.localStorageService.searchSavedSchemas(input);\n    this.showSearchDropdown(results);\n  }\n\n  handleSearchKeyDown(event) {\n    if (this.elements.dropdownContainer.style.display === \"none\" && event.key === \"ArrowDown\") {\n      const results = this.localStorageService.searchSavedSchemas(\"\").slice(0, 7);\n      this.showSearchDropdown(results);\n      this.searchState.selectedIndex = -1;\n      return;\n    }\n\n    if (this.elements.dropdownContainer.style.display === \"block\") {\n      this.handleDropdownNavigation(event);\n    }\n  }\n\n  showSearchDropdown(results) {\n    const dropdownContainer = this.elements.dropdownContainer;\n    dropdownContainer.innerHTML = \"\";\n    this.searchState.visibleItems = [];\n    this.searchState.selectedIndex = -1;\n\n    if (results.length === 0) {\n      dropdownContainer.style.display = \"none\";\n      return;\n    }\n\n    const groupedResults = results.reduce((groups, table) => {\n      if (!groups[table.schemaName]) {\n        groups[table.schemaName] = [];\n      }\n      groups[table.schemaName].push(table);\n      return groups;\n    }, {});\n\n    Object.entries(groupedResults).forEach(([schemaName, tables]) => {\n      const schemaGroup = document.createElement(\"div\");\n      schemaGroup.className = \"schema-group\";\n\n      const schemaHeader = document.createElement(\"div\");\n      schemaHeader.className = \"schema-header\";\n      schemaHeader.textContent = schemaName;\n      schemaGroup.appendChild(schemaHeader);\n\n      tables.forEach((table) => {\n        const item = document.createElement(\"div\");\n        item.className = \"search-result-item\";\n        item.textContent = table.tableName;\n\n        // Store the full table name for easy access\n        item.dataset.fullName = table.fullName;\n\n        // Add to visible items array for keyboard navigation\n        this.searchState.visibleItems.push(item);\n\n        item.addEventListener(\"click\", () => this.selectSearchResult(table.fullName));\n\n        schemaGroup.appendChild(item);\n      });\n\n      dropdownContainer.appendChild(schemaGroup);\n    });\n\n    dropdownContainer.style.display = \"block\";\n  }\n\n  selectSearchResult(fullName) {\n    this.elements.tableNameInput.value = fullName;\n    this.elements.dropdownContainer.style.display = \"none\";\n    this.handleLoadSchema(fullName);\n\n    // Reset selection\n    this.searchState.selectedIndex = -1;\n    this.elements.tableNameInput.focus();\n  }\n\n  handleDropdownNavigation(event) {\n    switch (event.key) {\n      case \"ArrowDown\":\n        event.preventDefault();\n        this.searchState.selectedIndex = Math.min(this.searchState.selectedIndex + 1, this.searchState.visibleItems.length - 1);\n        this.updateSearchSelection();\n        break;\n\n      case \"ArrowUp\":\n        event.preventDefault();\n        this.searchState.selectedIndex = Math.max(this.searchState.selectedIndex - 1, -1);\n        this.updateSearchSelection();\n        break;\n\n      case \"Enter\":\n        event.preventDefault();\n        if (this.searchState.selectedIndex >= 0 && this.searchState.selectedIndex < this.searchState.visibleItems.length) {\n          this.selectSearchResult(this.searchState.visibleItems[this.searchState.selectedIndex].dataset.fullName);\n        }\n        break;\n\n      case \"Escape\":\n        this.elements.dropdownContainer.style.display = \"none\";\n        this.searchState.selectedIndex = -1;\n        break;\n    }\n  }\n\n  updateSearchSelection() {\n    this.searchState.visibleItems.forEach((item, index) => {\n      if (index === this.searchState.selectedIndex) {\n        item.classList.add(\"selected\");\n        item.scrollIntoView({ block: \"nearest\" });\n      } else {\n        item.classList.remove(\"selected\");\n      }\n    });\n  }\n\n  loadMostRecentSchema() {\n    const allTables = this.localStorageService.getAllTables();\n    if (allTables.length > 0) {\n      const mostRecent = allTables[0];\n      this.handleLoadSchema(mostRecent.fullName);\n    }\n  }\n\n  async handleSchemaFileInput(event) {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    try {\n      const text = await file.text();\n      const jsonData = JSON.parse(text);\n\n      if (!this.isValidSchemaFormat(jsonData)) {\n        throw new Error(\"Invalid schema format\");\n      }\n\n      let importCount = 0;\n      Object.entries(jsonData).forEach(([schemaName, tables]) => {\n        Object.entries(tables).forEach(([tableName, schema]) => {\n          const fullTableName = `${schemaName}.${tableName}`;\n          if (this.localStorageService.saveSchema(fullTableName, schema)) {\n            importCount++;\n          }\n        });\n      });\n\n      this.updateSavedSchemasList();\n      this.showSuccess(`Successfully imported ${importCount} table schemas`);\n      setTimeout(() => this.clearError(), 3000);\n    } catch (error) {\n      this.showError(`Failed to import schemas: ${error.message}`);\n    } finally {\n      event.target.value = \"\"; // Reset file input\n    }\n  }\n\n  isValidSchemaFormat(data) {\n    if (!data || typeof data !== \"object\") return false;\n\n    return Object.entries(data).every(([schemaName, tables]) => {\n      if (typeof tables !== \"object\") return false;\n\n      return Object.entries(tables).every(([tableName, schema]) => {\n        return (\n          Array.isArray(schema) &&\n          schema.every(\n            (row) =>\n              Array.isArray(row) &&\n              row.length >= 3 && // At least name, type, and nullable\n              typeof row[0] === \"string\" &&\n              typeof row[1] === \"string\" &&\n              typeof row[2] === \"string\"\n          )\n        );\n      });\n    });\n  }\n\n  adjustDbeaverSchema(schemaData) {\n    console.log(\"Adjusting schema data\");\n\n    // Remove the header row\n    const removedHeader = schemaData.slice(1);\n\n    // Transform the data\n    const adjustedSchemaData = removedHeader.map((row) => {\n      // Original DBeaver format:\n      // [0]: Column Name\n      // [1]: Column Type\n      // [2]: Type Name\n      // [3]: Column Size\n      // [4]: Nullable\n      // [5]: Default Value\n      // [6]: Comments\n\n      // Transform nullable from TRUE/FALSE to No/Yes\n      const nullable = String(row[4]).toLowerCase() === \"true\" ? \"No\" : \"Yes\";\n\n      // Transform [NULL] to empty string\n      const defaultValue = row[5] === \"[NULL]\" ? \"\" : row[5];\n\n      return [\n        row[0], // [0] Field Name (same as Column Name)\n        row[2], // [1] Data Type (use Type Name instead of Column Type)\n        nullable, // [2] Nullable/PK\n        defaultValue, // [3] Default Value\n        row[1] || \"\", // [4] Field Order (use Column Type as order)\n        row[6] || \"\", // [5] Comments\n      ];\n    });\n\n    // Update the schemaTable with the new data\n    if (this.schemaTable && typeof this.schemaTable.loadData === \"function\") {\n      try {\n        // Clear existing data and load new data\n        this.schemaTable.loadData(adjustedSchemaData);\n        this.updateDataSpreadsheet();\n      } catch (error) {\n        console.error(\"Error updating schema table:\", error);\n      }\n    }\n  }\n\n  async handleAttachmentsInput(e) {\n    const files = Array.from(e.target.files);\n    if (files.length > 0) {\n      try {\n        this.processedFiles = await this.attachmentProcessorService.processAttachments(files);\n        console.log(\"Processed files:\", this.processedFiles);\n\n        // Clear existing file buttons\n        this.elements.filesContainer.innerHTML = \"\";\n        // Reset file input\n        this.elements.attachmentsInput.value = \"\";\n\n        // Create file buttons for each processed file\n        this.processedFiles.forEach((file, index) => {\n          const fileButton = document.createElement(\"button\");\n          fileButton.className = \"file-button\";\n          fileButton.innerHTML = `\n            <div class=\"file-info\">\n              <button class=\"copy-filename\" title=\"Copy filename\">\n                <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                  <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n                  <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n                </svg>\n              </button>\n              <span class=\"file-name\">${file.name}</span>\n            </div>\n            <div class=\"file-actions\">\n              <span class=\"file-size\">${(file.size / 1024).toFixed(2)} KB</span>\n              <button class=\"delete-file\" title=\"Delete file\">×</button>\n            </div>\n          `;\n\n          const copyBtn = fileButton.querySelector(\".copy-filename\");\n          copyBtn.addEventListener(\"click\", (e) => {\n            e.stopPropagation(); // Prevent file button click\n            navigator.clipboard.writeText(file.name);\n\n            // Visual feedback\n            copyBtn.classList.add(\"copied\");\n            setTimeout(() => copyBtn.classList.remove(\"copied\"), 1000);\n          });\n\n          // Add click handler for the delete button\n          const deleteBtn = fileButton.querySelector(\".delete-file\");\n          deleteBtn.addEventListener(\"click\", (e) => {\n            e.stopPropagation(); // Prevent file button click\n            const fileIndex = this.processedFiles.findIndex((f) => f.name === file.name);\n            if (fileIndex !== -1) {\n              this.processedFiles.splice(fileIndex, 1);\n              fileButton.remove();\n            }\n\n            // If no files left, show the upload container again\n            if (this.processedFiles.length === 0) {\n              this.elements.filesContainer.classList.add(\"hidden\");\n              this.elements.attachmentsContainer.classList.remove(\"hidden\");\n            }\n          });\n\n          fileButton.addEventListener(\"click\", () => this.showFileViewer(file));\n          this.elements.filesContainer.appendChild(fileButton);\n        });\n\n        // Hide attachments container and show files container\n        this.elements.attachmentsContainer.classList.add(\"hidden\");\n        this.elements.filesContainer.classList.remove(\"hidden\");\n\n        this.clearError();\n      } catch (error) {\n        this.showError(`Error processing attachments: ${error.message}`);\n      }\n    }\n  }\n\n  showFileViewer(file) {\n    const overlay = document.getElementById(\"fileViewerOverlay\");\n    const title = document.getElementById(\"fileViewerTitle\");\n    const originalContent = document.getElementById(\"originalContent\");\n    const processedContent = document.getElementById(\"processedContent\");\n    const metadata = document.getElementById(\"fileMetadata\");\n    const processedTab = document.querySelector('.tab-button[data-tab=\"processed\"]');\n\n    console.log(\"File viewer showing for file:\", file);\n    title.textContent = file.name;\n\n    // Clear previous content\n    originalContent.innerHTML = \"\";\n    processedContent.innerHTML = \"\";\n\n    const metadataElements = {\n      fileType: document.getElementById(\"fileType\"),\n      fileSize: document.getElementById(\"fileSize\"),\n      base64Size: document.getElementById(\"base64Size\"),\n      dimensions: document.getElementById(\"dimensions\"),\n      lineCount: document.getElementById(\"lineCount\"),\n      charCount: document.getElementById(\"charCount\"),\n    };\n\n    // clear previous content\n    Object.values(metadataElements).forEach((el) => (el.textContent = \"\"));\n    Object.values(metadataElements).forEach((el) => el.classList.add(\"hidden\"));\n    // Set common metadata\n    metadataElements.fileType.textContent = `File Type: ${file.type}`;\n    metadataElements.fileType.classList.remove(\"hidden\");\n\n    // Handle different file types\n    if (file.type.startsWith(\"image/\") || file.type === \"application/pdf\") {\n      // Original content (actual file)\n      const viewer = document.createElement(\"div\");\n      viewer.className = file.type.startsWith(\"image/\") ? \"image-viewer\" : \"pdf-viewer\";\n\n      if (file.type.startsWith(\"image/\")) {\n        const img = document.createElement(\"img\");\n        img.src = file.processedFormats.base64;\n        viewer.appendChild(img);\n\n        // Update metadata once image is loaded\n        img.onload = () => {\n          metadataElements.fileSize.textContent = `Media Size: ${(file.size / 1024).toFixed(2)} KB`;\n          metadataElements.base64Size.textContent = `Base64 Size: ${(file.processedFormats.base64.length / 1024).toFixed(2)} KB`;\n          metadataElements.dimensions.textContent = `Dimensions: ${img.naturalWidth} × ${img.naturalHeight}`;\n\n          [metadataElements.fileSize, metadataElements.base64Size, metadataElements.dimensions].forEach((el) =>\n            el.classList.remove(\"hidden\")\n          );\n        };\n      } else {\n        // PDF viewer\n        const obj = document.createElement(\"object\");\n        obj.data = file.processedFormats.base64;\n        obj.type = \"application/pdf\";\n        obj.width = \"100%\";\n        obj.height = \"600px\";\n        viewer.appendChild(obj);\n\n        metadataElements.fileSize.textContent = `Size: ${(file.size / 1024).toFixed(2)} KB`;\n        metadataElements.base64Size.textContent = `Base64 Size: ${(file.processedFormats.base64.length / 1024).toFixed(2)} KB`;\n        [metadataElements.fileSize, metadataElements.base64Size].forEach((el) => el.classList.remove(\"hidden\"));\n      }\n\n      originalContent.appendChild(viewer);\n\n      // Processed content (base64 string)\n      const pre = document.createElement(\"pre\");\n      pre.className = \"base64-content\";\n      pre.textContent = file.processedFormats.base64;\n      processedContent.appendChild(pre);\n\n      // Show both tabs\n      processedTab.style.display = \"block\";\n    } else if (file.processedFormats.contentType?.includes(\"base64\")) {\n      // For base64 text files: Original = Base64, Processed = Rendered content\n\n      // Original content (base64 text)\n      const pre = document.createElement(\"pre\");\n      pre.className = \"base64-content\";\n      pre.textContent = file.processedFormats.original;\n      originalContent.appendChild(pre);\n\n      // Processed content (rendered base64)\n      const viewer = document.createElement(\"div\");\n      viewer.className = \"rendered-content\";\n\n      if (file.processedFormats.base64.startsWith(\"data:image/\")) {\n        const img = document.createElement(\"img\");\n        img.src = file.processedFormats.base64;\n        viewer.appendChild(img);\n      } else if (file.processedFormats.base64.startsWith(\"data:application/pdf\")) {\n        const obj = document.createElement(\"object\");\n        obj.data = file.processedFormats.base64;\n        obj.type = \"application/pdf\";\n        viewer.appendChild(obj);\n      }\n\n      processedContent.appendChild(viewer);\n\n      // Show both tabs\n      processedTab.style.display = \"block\";\n\n      metadataElements.fileSize.textContent = `Original Media Size: ${(file.processedFormats.sizes.original / 1024).toFixed(2)} KB`;\n      if (file.processedFormats.base64) {\n        metadataElements.base64Size.textContent = `Base64 Size: ${(file.processedFormats.base64.length / 1024).toFixed(2)} KB`;\n        metadataElements.base64Size.classList.remove(\"hidden\");\n      }\n      metadataElements.fileSize.classList.remove(\"hidden\");\n    } else {\n      // For regular text files (txt, json, html): Only show original\n      const pre = document.createElement(\"pre\");\n      pre.className = \"text-content\";\n      pre.textContent = file.processedFormats.original;\n      originalContent.appendChild(pre);\n\n      const textLength = file.processedFormats.original.length;\n      const lineCount = (file.processedFormats.original.match(/\\n/g) || []).length + 1;\n\n      metadataElements.fileSize.textContent = `Size: ${(textLength / 1024).toFixed(2)} KB`;\n      metadataElements.lineCount.textContent = `Lines: ${lineCount}`;\n      metadataElements.charCount.textContent = `Characters: ${textLength}`;\n\n      [metadataElements.fileSize, metadataElements.lineCount, metadataElements.charCount].forEach((el) => el.classList.remove(\"hidden\"));\n\n      // Hide processed tab\n      processedTab.style.display = \"none\";\n    }\n\n    // Show overlay and set initial state\n    overlay.classList.remove(\"hidden\");\n    document.querySelector('.tab-button[data-tab=\"original\"]').classList.add(\"active\");\n    document.getElementById(\"originalContent\").classList.add(\"active\");\n\n    // Add tab switching functionality\n    document.querySelectorAll(\".tab-button\").forEach((button) => {\n      button.onclick = () => {\n        document.querySelectorAll(\".tab-button\").forEach((btn) => btn.classList.remove(\"active\"));\n        button.classList.add(\"active\");\n\n        document.querySelectorAll(\".tab-content\").forEach((content) => content.classList.remove(\"active\"));\n        document.getElementById(`${button.dataset.tab}Content`).classList.add(\"active\");\n      };\n    });\n\n    // Add close button handler\n    document.getElementById(\"closeFileViewer\").onclick = () => {\n      overlay.classList.add(\"hidden\");\n    };\n  }\n\n  showFilePreview() {\n    this.elements.filePreviewOverlay.classList.remove(\"hidden\");\n  }\n  closeFilePreview() {\n    this.elements.filePreviewOverlay.classList.add(\"hidden\");\n  }\n\n  handleDragOver(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.attachmentsContainer.classList.add(\"drag-over\");\n  }\n\n  handleDragLeave(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.attachmentsContainer.classList.remove(\"drag-over\");\n  }\n\n  handleDrop(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.attachmentsContainer.classList.remove(\"drag-over\");\n  }\n}\n","import { QuickQueryUI } from \"./quickQuery.ui\";\n\n// Export the main initialization function\nexport function initQuickQuery(container) {\n  const quickQueryUI = new QuickQueryUI(container);\n  return quickQueryUI;\n}\n"],"names":["STORAGE_KEY","ORACLE_NAME_REGEX","MAX_SCHEMA_LENGTH","MAX_TABLE_LENGTH","MAX_CACHED_ROWS","LocalStorageService","fullTableName","schemaName","tableName","data","error","schemaData","tableData","storageData","includeData","tableInfo","_a","allTables","b","str","name","type","byteLength","pattern","parts","abbrs","part","i","schema","table","searchTerm","termLower","schemaAbbrs","schemaSearch","tableSearch","schemaPattern","tablePattern","a","schemaAbbrsA","schemaAbbrsB","schemaMatchA","schemaMatchB","tableMatchA","tableMatchB","searchPattern","scoreA","tables","row","ValueProcessorService","value","dataType","nullable","fieldName","AUDIT_FIELDS","hasNoValue","hasNoTimestampCharacters","upperDataType","fieldDataType","normalizedValue","num","UUID_V4_MAXLENGTH","upperType","numberMatch","stringMatch","precision","scale","integerDigits","decimalDigits","parameterKeyField","field","pkFields","upperValue","parsed","moment","fractionalMatch","datePart","fractionalPart","commonFormats","format","amPmFormats","result","currentChunkSize","isFirstChunk","char","oracleReservedWords","sampleSchema1","sampleData1","initialSchemaTableSpecification","instance","td","col","prop","cellProperties","callback","changes","this","TH","header","initialDataTableSpecification","AttachmentValidationService","maxLength","attachments","matchingFile","file","content","QueryGenerationService","queryType","inputData","fieldNames","dataRows","cell","schemaMap","processedRows","rowData","rowIndex","colIndex","schemaRow","attachmentValue","primaryKeys","query","processedFields","selectQuery","fields","f","values","primaryKeysLowerCase","pk","selectFields","pkConditions","updateFields","insertFields","insertValues","mergeStatement","pkValueMap","whereConditions","pkName","selectStatement","match","SchemaValidationService","invalidDataTypes","invalidNullableValues","errors","hasSchemaData","hasFieldNames","hasFirstDataRow","_b","schemaFieldNames","inputFieldNames","emptyColumnIndex","missingInSchema","missingInData","isDbeaverSchema","SQLSplitterService","sql","stmt","trimmedStmt","chunks","oversizedChunksCount","defineOff","validationQuery","statements","currentChunk","currentSize","validationSize","statement","statementSize","AttachmentProcessorService","files","processedFiles","sanitizedFileName","extension","processedFile","base64Data","textContent","cleaned","base64Content","decoded","readAs","resolve","reject","reader","mainTemplate","tutorialTemplate","QuickQueryUI","container","DependencyLoader","guideContainer","e","copyToClipboard","elementId","events","element","event","handler","schemaTableConfig","dataTableConfig","source","currentData","columnCount","columnHeaders","_","newData","message","filename","blob","url","splitButton","originalText","originalColor","zip","baseFileName","chunk","index","chunkFileName","wordWrapButton","newState","newRow","groupedTables","groups","groupDiv","headerDiv","itemDiv","infoDiv","nameDiv","timestampDiv","actionsDiv","loadBtn","deleteBtn","fullName","exportData","tableNameInput","dropdownContainer","input","results","groupedResults","schemaGroup","schemaHeader","item","mostRecent","text","jsonData","importCount","adjustedSchemaData","defaultValue","fileButton","copyBtn","fileIndex","overlay","title","originalContent","processedContent","processedTab","metadataElements","el","viewer","img","obj","pre","textLength","lineCount","button","btn","initQuickQuery"],"mappings":"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D,IAAS,KAAOA,IAAS,KAAYA,IAAS,IAChDA,EAAO,MACEA,IAAS,KAAYA,IAAS,OACvCA,EAAO,MAGLF,EAAmBE,EAAK,OAAS,KAAaD,KAC3CA,IACHF,GAAU;AAAA,GAEZA,GAAU,YACVC,EAAmB,EACnBC,EAAe,IAGjBF,GAAUG,EACVF,GAAoBE,EAAK,MAC/B,CAEI,OAAAH,GAAU,KACHA,CACX,CAEE,WAAW/B,EAAO,CAChB,MAAO,wBAAwBA,CAAK,IACxC,CACA,CC1UO,MAAMmC,EAAsB,IAAI,IAAI,CACzC,SACA,MACA,MACA,QACA,MACA,MACA,KACA,MACA,QACA,UACA,KACA,OACA,QACA,UACA,SACA,UACA,WACA,UACA,SACA,UACA,OACA,UACA,UACA,SACA,OACA,WACA,OACA,OACA,YACA,SACA,OACA,QACA,MACA,OACA,QACA,QACA,SACA,aACA,YACA,KACA,YACA,QACA,UACA,SACA,UACA,YACA,OACA,KACA,QACA,OACA,OACA,OACA,aACA,QACA,WACA,OACA,SACA,UACA,aACA,MACA,SACA,OACA,SACA,KACA,UACA,KACA,SACA,SACA,KACA,QACA,UACA,QACA,aACA,SACA,MACA,SACA,WACA,SACA,MACA,QACA,SACA,OACA,SACA,UACA,MACA,QACA,OACA,WACA,QACA,aACA,UACA,UACA,QACA,OACA,KACA,UACA,MACA,QACA,SACA,SACA,OACA,WACA,SACA,UACA,WACA,OACA,WACA,QACA,OACA,WACA,OACA,UACA,MACF,CAAC,EA8BYC,EAAgB,CAC3B,CAAC,WAAY,eAAgB,KAAM,GAAI,GAAG,EAC1C,CAAC,UAAW,gBAAiB,KAAM,GAAI,GAAG,EAC1C,CAAC,UAAW,gBAAiB,KAAM,GAAI,GAAG,EAC1C,CAAC,SAAU,eAAgB,MAAO,GAAI,GAAG,EACzC,CAAC,WAAY,cAAe,KAAM,GAAI,GAAG,EACzC,CAAC,YAAa,SAAU,KAAM,GAAI,GAAG,EACrC,CAAC,eAAgB,eAAgB,KAAM,GAAI,GAAG,EAC9C,CAAC,aAAc,eAAgB,KAAM,GAAI,GAAG,EAC5C,C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"}