{"version":3,"file":"main-BrhDUMWV.js","sources":["../../src/features/screenshot/screenshot.template.js","../../src/features/screenshot/screenshot.service.js","../../src/features/screenshot/screenshot.ui.js","../../src/features/screenshot/main.js"],"sourcesContent":["export const screenshotTemplate = `\n  <div class=\"tool-container\">\n    <h3 id=\"sectionText\">Generate Documentation Template for Config Deployment</h3>\n    <textarea id=\"inputList\" placeholder=\"Enter table name, one table per line\"></textarea>\n    <div class=\"button-group\">\n      <button id=\"generateButton\">Generate Document</button>\n      <button id=\"clearButton\">Clear</button>\n      <button id=\"pasteButton\">Paste</button>\n    </div>\n  </div>\n`;","export class ScreenshotService {\n    async loadDocxLibrary() {\n        return new Promise((resolve, reject) => {\n            const script = document.createElement(\"script\");\n            script.src = \"https://unpkg.com/docx@7.1.0/build/index.js\";\n            script.onload = () => resolve(window.docx);\n            script.onerror = reject;\n            document.head.appendChild(script);\n        });\n    }\n\n    getFormattedDate() {\n        const now = new Date();\n        const day = String(now.getDate()).padStart(2, \"0\");\n        const month = String(now.getMonth() + 1).padStart(2, \"0\");\n        const year = now.getFullYear();\n        return `${day}_${month}_${year}`;\n    }\n\n    toUpperCase(str) {\n        return str.toUpperCase();\n    }\n\n    async generateDocument(inputText) {\n        try {\n            const docx = await this.loadDocxLibrary();\n\n            const items = inputText\n                .split(\"\\n\")\n                .filter((item) => item.trim() !== \"\")\n                .map((item) => this.toUpperCase(item.trim()));\n\n            const doc = new docx.Document({\n                sections: [\n                    {\n                        properties: {},\n                        children: [\n                            new docx.Paragraph({\n                                text: `Deployment (Config) - ${new Date().toLocaleDateString(\n                                    \"en-US\",\n                                    { day: \"numeric\", month: \"long\", year: \"numeric\" }\n                                )}`,\n                                heading: docx.HeadingLevel.HEADING_1,\n                            }),\n                            ...items.flatMap((item) => [\n                                new docx.Paragraph({\n                                    text: item,\n                                    heading: docx.HeadingLevel.HEADING_2,\n                                }),\n                                new docx.Paragraph(\"Before\"),\n                                new docx.Paragraph(\"\"),\n                                new docx.Paragraph(\"\"),\n                                new docx.Paragraph(\"Execution\"),\n                                new docx.Paragraph(\"\"),\n                                new docx.Paragraph(\"\"),\n                                new docx.Paragraph(\"Commit\"),\n                                new docx.Paragraph(\"\"),\n                                new docx.Paragraph(\"\"),\n                                new docx.Paragraph(\"\"),\n                            ]),\n                        ],\n                    },\n                ],\n                styles: {\n                    paragraphStyles: [\n                        {\n                            id: \"Heading1\",\n                            name: \"Heading 1\",\n                            basedOn: \"Normal\",\n                            next: \"Normal\",\n                            quickFormat: true,\n                            run: {\n                                size: 32,\n                                font: \"Calibri\",\n                                color: \"2F5496\",\n                            },\n                            paragraph: {\n                                spacing: {\n                                    after: 240,\n                                },\n                            },\n                        },\n                        {\n                            id: \"Heading2\",\n                            name: \"Heading 2\",\n                            basedOn: \"Normal\",\n                            next: \"Normal\",\n                            quickFormat: true,\n                            run: {\n                                size: 24,\n                                font: \"Calibri\",\n                                color: \"2F5496\",\n                            },\n                            paragraph: {\n                                spacing: {\n                                    after: 0,\n                                },\n                            },\n                        },\n                    ],\n                    default: {\n                        document: {\n                            run: {\n                                font: \"Calibri\",\n                                size: 20,\n                            },\n                        },\n                    },\n                },\n            });\n\n            return docx.Packer.toBlob(doc);\n        } catch (error) {\n            console.error(\"Error generating document:\", error);\n            throw new Error(\"Failed to generate document. Please try again.\");\n        }\n    }\n}","import { copyToClipboard, pasteFromClipboard } from \"../../utils/buttons.js\";\nimport { screenshotTemplate } from \"./screenshot.template.js\";\nimport { ScreenshotService } from \"./screenshot.service.js\";\n\nexport class ScreenshotUI {\n  constructor(container) {\n    this.container = container;\n    this.screenshotService = new ScreenshotService();\n    this.init();\n  }\n\n  async init() {\n    await this.initializeUi();\n    this.bindElements();\n    this.setupEventListeners();\n    this.adjustTextareaHeight(this.elements.inputList);\n  }\n\n  async initializeUi() {\n    return new Promise((resolve) => {\n      this.container.innerHTML = screenshotTemplate;\n      requestAnimationFrame(() => {\n        resolve();\n      });\n    });\n  }\n\n  bindElements() {\n    this.elements = {\n      inputList: document.getElementById(\"inputList\"),\n      generateButton: document.getElementById(\"generateButton\"),\n      clearButton: document.getElementById(\"clearButton\"),\n      pasteButton: document.getElementById(\"pasteButton\"),\n    };\n  }\n\n  setupEventListeners() {\n    this.elements.generateButton.addEventListener(\"click\", () => this.generateDocument());\n    this.elements.clearButton.addEventListener(\"click\", () => this.handleClear());\n    this.elements.pasteButton.addEventListener(\"click\", () => this.handlePaste());\n    this.elements.inputList.addEventListener(\"input\", () => this.adjustTextareaHeight(this.elements.inputList));\n  }\n\n  adjustTextareaHeight(textarea) {\n    textarea.style.height = \"auto\";\n    textarea.style.height = textarea.scrollHeight + \"px\";\n  }\n\n  async generateDocument() {\n    try {\n      const blob = await this.screenshotService.generateDocument(this.elements.inputList.value);\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = `deploy_config_${this.screenshotService.getFormattedDate()}.docx`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error(\"Error generating document:\", error);\n      alert(error.message);\n    }\n  }\n\n  handleClear() {\n    this.elements.inputList.value = \"\";\n    this.adjustTextareaHeight(this.elements.inputList);\n  }\n\n  async handlePaste() {\n    await pasteFromClipboard(this.elements.inputList);\n    this.adjustTextareaHeight(this.elements.inputList);\n  }\n}\n","import { ScreenshotUI } from \"./screenshot.ui.js\";\n\nexport function initScreenshotTemplate(container) {\n    return new ScreenshotUI(container);\n}"],"names":["screenshotTemplate","ScreenshotService","resolve","reject","script","now","day","month","year","str","inputText","docx","items","item","doc","error","ScreenshotUI","container","textarea","blob","url","link","pasteFromClipboard","initScreenshotTemplate"],"mappings":"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"}