{"version":3,"file":"main-CZdoxjV5.js","sources":["../../src/features/querify/ui/querify.template.js","../../src/features/querify/main.js"],"sourcesContent":["export const querifyTemplate = `\n<div class=\"tool-container querify-tool-container\">\n  <div class=\"querify-left-panel\">\n    <div id=\"dragDropArea\" class=\"querify-drag-drop-area wide\">\n      <p>Drag and drop files here or click to select</p>\n      <input type=\"file\" id=\"querifyInputFiles\" accept=\".xlsx, .xls, .txt, .jpg, .jpeg, .png \" multiple style=\"display: none;\" />\n    </div>\n    <div class=\"querify-file-list\">\n      <div id=\"excelFiles\"></div>\n      <div id=\"textFiles\"></div>\n      <div id=\"imageFiles\"></div>\n    </div>\n  </div>\n  <div class=\"querify-right-panel\">\n    <div class=\"button-group querify-button-group\">\n      <select id=\"queryType\">\n        <option value=\"merge-classic\">MERGE INTO (Querify Classic)</option>\n        <option value=\"merge\">MERGE INTO (Compact)</option>\n        <option value=\"insert\">INSERT INTO</option>\n      </select>\n      <button id=\"generateAll\" title=\"Generate queries for all files\">Generate All</button>\n      <button id=\"copySQL\">Copy</button>\n      <button id=\"downloadSQL\">Download</button>\n      <button id=\"downloadAll\">Download All</button>\n      <button id=\"toggleWrap\">Word Wrap</button>\n      <button id=\"splitSQL\" title=\"Split query into 90 kilobytes chunks for Jenkins execution\" disabled>Split</button>\n    </div>\n    <div id=\"errorMessages\"></div>\n    <div id=\"queryEditor\" class=\"querify-content-area\"></div>\n    <div id=\"imagePreviewContainer\" class=\"querify-content-area\" style=\"display: none;\">\n      <img id=\"imagePreview\" style=\"max-width: 100%; max-height: 300px;\">\n      <div id=\"imageInfo\"></div>\n    </div>\n    <div id=\"textPreviewContainer\" class=\"querify-content-area\" style=\"display: none;\">\n      <pre id=\"textPreview\"></pre>\n    </div>\n    <div id=\"progressBar\" class=\"querify-progress-bar\" style=\"display: none;\">\n      <div class=\"progress\"></div>\n    </div>\n  </div>\n  <button id=\"aboutQuerify\" class=\"about-button\">?</button>\n</div>\n`;\n","import { copyToClipboard } from \"../../utils/buttons.js\";\nimport { querifyTemplate } from \"./ui/querify.template.js\";\n\nexport function initQuerify(container) {\n  container.innerHTML = querifyTemplate;\n\n  let excelFiles = [];\n  let textFiles = [];\n  let imageFiles = [];\n  let fileContents = {};\n\n  let selectedFile = null;\n  let editor;\n  let isWordWrapEnabled = false;\n  let generatedQueries = {};\n  let fileValidationStatus = {};\n  let scriptDependencies = [\n    \"https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js\",\n    \"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js\",\n    \"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.js\",\n    \"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/sql/sql.min.js\",\n    \"https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js\",\n    \"https://cdn.jsdelivr.net/npm/marked/marked.min.js\",\n  ];\n\n  // Elements\n  const fileInput = document.getElementById(\"querifyInputFiles\");\n  const queryTypeSelect = document.getElementById(\"queryType\");\n  const generateAllButton = document.getElementById(\"generateAll\");\n  const errorMessagesDiv = document.getElementById(\"errorMessages\");\n  const downloadButton = document.getElementById(\"downloadSQL\");\n  const downloadAllButton = document.getElementById(\"downloadAll\");\n  const copyButton = document.getElementById(\"copySQL\");\n  const toggleWrapButton = document.getElementById(\"toggleWrap\");\n  const queryEditor = document.getElementById(\"queryEditor\");\n  const dragDropArea = document.getElementById(\"dragDropArea\");\n  const splitButton = document.getElementById(\"splitSQL\");\n  const aboutButton = document.getElementById(\"aboutQuerify\");\n\n  // Event listeners\n  fileInput.addEventListener(\"change\", handleFileSelection);\n  generateAllButton.addEventListener(\"click\", handleGenerateAll);\n  downloadButton.addEventListener(\"click\", handleDownloadSQL);\n  downloadAllButton.addEventListener(\"click\", handleDownloadAll);\n  copyButton.addEventListener(\"click\", () => copyToClipboard(editor.getValue(), copyButton));\n  toggleWrapButton.addEventListener(\"click\", toggleWordWrap);\n  queryTypeSelect.addEventListener(\"change\", handleQueryTypeChange);\n  dragDropArea.addEventListener(\"dragover\", handleDragOver);\n  dragDropArea.addEventListener(\"dragleave\", handleDragLeave);\n  dragDropArea.addEventListener(\"drop\", handleDrop);\n  dragDropArea.addEventListener(\"click\", () => fileInput.click());\n  splitButton.addEventListener(\"click\", handleSplitSQL);\n  aboutButton.addEventListener(\"click\", showAboutPopup);\n\n  // Initial commands to load scripts and clear error\n  loadScriptInOrder(scriptDependencies);\n  clearError();\n\n  function loadScriptInOrder(scripts, index = 0) {\n    if (index < scripts.length) {\n      const script = document.createElement(\"script\");\n      script.src = scripts[index];\n      script.onload = () => loadScriptInOrder(scripts, index + 1);\n      document.head.appendChild(script);\n    } else {\n      initializeEditor();\n    }\n  }\n\n  function initializeEditor() {\n    editor = CodeMirror(queryEditor, {\n      mode: \"text/x-sql\",\n      theme: \"material\",\n      lineNumbers: true,\n      readOnly: true,\n    });\n\n    console.log(\"Editor initialized successfully\");\n  }\n\n  function selectFile(index, type) {\n    if (type === \"excel\") {\n      selectedFile = excelFiles[index];\n      if (generatedQueries[selectedFile.name]) {\n        editor.setValue(generatedQueries[selectedFile.name].query);\n      } else {\n        editor.setValue(\"\");\n      }\n\n      if (fileValidationStatus[selectedFile.name] === false) {\n        showError(fileValidationStatus[selectedFile.name + \"_error\"]);\n      } else {\n        clearError();\n      }\n      showContentArea(\"queryEditor\");\n    } else if (type === \"text\") {\n      selectedFile = textFiles[index];\n      showTextFile(selectedFile);\n    } else if (type === \"image\") {\n      selectedFile = imageFiles[index];\n      selectImageFile(selectedFile);\n    }\n\n    // Update the highlighting for all file types\n    updateSelectedFileHighlight();\n    updateSplitButtonState();\n  }\n\n  function updateSelectedFileHighlight() {\n    const fileButtons = document.querySelectorAll(\".querify-file-button\");\n    fileButtons.forEach((button) => {\n      if (selectedFile && button.dataset.fileName === selectedFile.name) {\n        button.classList.add(\"selected-file\");\n      } else {\n        button.classList.remove(\"selected-file\");\n      }\n    });\n  }\n\n  function showContentArea(areaId) {\n    const contentAreas = document.querySelectorAll(\".querify-content-area\");\n    contentAreas.forEach((area) => (area.style.display = \"none\"));\n    document.getElementById(areaId).style.display = \"block\";\n\n    // Clear error message if the code editor is being hidden\n    if (areaId !== \"queryEditor\") {\n      clearError();\n    }\n  }\n\n  function handleFileSelection(e) {\n    clearError();\n    const selectedFiles = Array.from(e.target.files);\n    processFiles(selectedFiles);\n  }\n\n  function processFiles(files) {\n    excelFiles = [];\n    textFiles = [];\n    imageFiles = [];\n    fileContents = {};\n\n    files.forEach((file) => {\n      console.log(\"Processing file:\", file.name);\n      const extension = file.name.split(\".\").pop().toLowerCase();\n\n      if (extension === \"xlsx\" || extension === \"xls\") {\n        excelFiles.push(file);\n      } else if (extension === \"txt\") {\n        // Read the content of the text file\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          const content = e.target.result;\n          if (content.trim().startsWith(\"data:image\")) {\n            console.log(\"Text file contains base64 image data:\", file.name);\n            imageFiles.push(file);\n          } else {\n            textFiles.push(file);\n          }\n          fileContents[file.name] = content;\n          updateFileList();\n        };\n        reader.readAsText(file);\n      } else if ([\"jpg\", \"jpeg\", \"png\", \"gif\"].includes(extension)) {\n        imageFiles.push(file);\n      }\n    });\n\n    updateFileList();\n    handleTextFiles();\n    handleImageFiles();\n    handleGenerateAll();\n  }\n\n  function updateFileList() {\n    const excelFilesDiv = document.getElementById(\"excelFiles\");\n    const textFilesDiv = document.getElementById(\"textFiles\");\n    const imageFilesDiv = document.getElementById(\"imageFiles\");\n    const fileListContainer = document.querySelector(\".querify-file-list\");\n\n    excelFilesDiv.innerHTML = excelFiles.length ? \"<h3>SQL Files:</h3>\" : \"\";\n    textFilesDiv.innerHTML = textFiles.length ? \"<h3>Text Files:</h3>\" : \"\";\n    imageFilesDiv.innerHTML = imageFiles.length ? \"<h3>Image Files:</h3>\" : \"\";\n\n    excelFiles.forEach((file, index) => {\n      const fileButton = createFileButton(file, index, \"excel\");\n      excelFilesDiv.appendChild(fileButton);\n    });\n\n    textFiles.forEach((file, index) => {\n      const fileButton = createFileButton(file, index, \"text\");\n      textFilesDiv.appendChild(fileButton);\n    });\n\n    imageFiles.forEach((file, index) => {\n      const fileButton = createFileButton(file, index, \"image\");\n      imageFilesDiv.appendChild(fileButton);\n    });\n\n    // Check if there are any files\n    const hasFiles = excelFiles.length > 0 || textFiles.length > 0 || imageFiles.length > 0;\n\n    // Show or hide the file list container\n    if (hasFiles) {\n      fileListContainer.style.display = \"flex\";\n      dragDropArea.classList.remove(\"wide\");\n      dragDropArea.classList.add(\"small\");\n    } else {\n      fileListContainer.style.display = \"none\";\n      dragDropArea.classList.remove(\"small\");\n      dragDropArea.classList.add(\"wide\");\n    }\n  }\n\n  function createFileButton(file, index, type) {\n    const fileButton = document.createElement(\"div\");\n    fileButton.className = \"querify-file-button\";\n    fileButton.dataset.fileName = file.name;\n\n    const fileInfo = document.createElement(\"div\");\n    fileInfo.className = \"querify-file-info\";\n\n    const fileNameSpan = document.createElement(\"span\");\n    fileNameSpan.className = \"file-name\";\n\n    // Remove file extension for Excel files\n    if (type === \"excel\") {\n      fileNameSpan.textContent = file.name.split(\".\").slice(0, -1).join(\".\");\n    } else {\n      fileNameSpan.textContent = file.name;\n    }\n\n    fileInfo.appendChild(fileNameSpan);\n\n    if (type === \"excel\") {\n      const pkSpan = document.createElement(\"span\");\n      pkSpan.className = \"primary-key\";\n      pkSpan.textContent = \"pk: loading...\";\n      fileInfo.appendChild(pkSpan);\n\n      const sqlSizeSpan = document.createElement(\"span\");\n      sqlSizeSpan.className = \"sql-size\";\n      sqlSizeSpan.textContent = \"size: calculating...\";\n      fileInfo.appendChild(sqlSizeSpan);\n\n      // Update primary key and SQL size after query generation\n      if (fileValidationStatus[file.name] === true && generatedQueries[file.name]) {\n        const tableName = file.name.split(\".\")[0];\n        const tableSchema = generatedQueries[file.name].tableSchema;\n        if (tableSchema) {\n          // Use the primary keys stored in generatedQueries\n          const primaryKeys = generatedQueries[file.name].primaryKeys;\n          pkSpan.textContent = `pk: ${primaryKeys.join(\", \")}`;\n\n          // Calculate and update SQL size\n          const query = generatedQueries[file.name].query;\n          const sizeInBytes = new Blob([query]).size;\n          let sizeText;\n          if (sizeInBytes >= 1024 * 1024) {\n            const sizeInMB = (sizeInBytes / (1024 * 1024)).toFixed(2);\n            sizeText = `${sizeInMB} MB`;\n          } else {\n            const sizeInKB = (sizeInBytes / 1024).toFixed(2);\n            sizeText = `${sizeInKB} KB`;\n          }\n          sqlSizeSpan.textContent = `size: ${sizeText}`;\n        } else {\n          pkSpan.textContent = \"pk: unknown\";\n          sqlSizeSpan.textContent = \"size: unknown\";\n        }\n      } else {\n        pkSpan.textContent = \"pk: unknown\";\n        sqlSizeSpan.textContent = \"size: unknown\";\n      }\n\n      if (fileValidationStatus[file.name] === false) {\n        fileButton.classList.add(\"invalid-file\");\n      } else if (fileValidationStatus[file.name] === true) {\n        fileButton.classList.add(\"valid-file\");\n      }\n    }\n\n    fileButton.appendChild(fileInfo);\n\n    fileButton.addEventListener(\"click\", () => selectFile(index, type));\n\n    return fileButton;\n  }\n\n  function findPrimaryKeys(tableSchema, tableName) {\n    console.log(\"TABLE:\", tableSchema, tableName);\n    if (!tableSchema || !Array.isArray(tableSchema)) {\n      console.warn(`Invalid table schema for ${tableName}`);\n      return [\"unknown\"];\n    }\n\n    // Special case for \"config\" tables\n    if (tableName.toLowerCase().endsWith(\"config\")) {\n      const parameterKeyField = tableSchema.find((field) => field.field.toLowerCase() === \"parameter_key\");\n      if (parameterKeyField) {\n        return [parameterKeyField.field];\n      }\n    } else if (tableName.toLowerCase().endsWith(\"event\")) {\n      const eventCodeField = tableSchema.find((field) => field.field.toLowerCase() === \"event_code\");\n      if (eventCodeField) {\n        return [eventCodeField.field];\n      }\n    }\n\n    // Look for all fields with \"PK\" or \"pk\" in the order column\n    const pkFields = tableSchema\n      .filter((field) => field.order && field.order.toString().toLowerCase() === \"pk\")\n      .map((field) => field.field);\n\n    if (pkFields.length > 0) {\n      return pkFields;\n    }\n\n    console.warn(`No suitable primary key found for ${tableName}. Using the first field as primary key.`);\n    console.log(tableSchema[0].field);\n    return [tableSchema[0] ? tableSchema[0].field.toLowerCase() : \"unknown\"];\n  }\n\n  function handleTextFiles() {\n    textFiles.forEach((file) => {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        console.log(`Found text file: ${file.name}:`);\n        fileContents[file.name] = e.target.result;\n      };\n      reader.readAsText(file);\n    });\n  }\n\n  function showTextFile(file) {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const textPreview = document.getElementById(\"textPreview\");\n      textPreview.textContent = e.target.result;\n      showContentArea(\"textPreviewContainer\");\n    };\n    reader.readAsText(file);\n  }\n\n  function convertToBase64(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = reject;\n      reader.readAsDataURL(file);\n    });\n  }\n\n  async function handleImageFiles() {\n    for (const file of imageFiles) {\n      if (file.name.toLowerCase().endsWith(\".txt\")) {\n        // Use pre-loaded content from processFile function\n        if (fileContents[file.name]) {\n          console.log(`Using pre-loaded content for ${file.name}`);\n        } else {\n          // Read base64 if it wasn't loaded\n          try {\n            await readTextFile(file);\n          } catch (error) {\n            console.error(`Error reading text file ${file.name}:`, error);\n          }\n        }\n      } else {\n        // For regular image files, convert to base64\n        try {\n          const base64Data = await convertToBase64(file);\n          fileContents[file.name] = base64Data;\n        } catch (error) {\n          console.error(`Error converting ${file.name} to base64:`, error);\n        }\n      }\n    }\n  }\n\n  function readTextFile(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        fileContents[file.name] = e.target.result;\n        resolve();\n      };\n      reader.onerror = reject;\n      reader.readAsText(file);\n    });\n  }\n\n  function selectImageFile(file) {\n    if (file.name.toLowerCase().endsWith(\".txt\")) {\n      // For text files, use the pre-loaded content\n      if (fileContents[file.name]) {\n        showImagePreview(fileContents[file.name], file.name);\n        showContentArea(\"imagePreviewContainer\");\n      } else {\n        console.warn(`Content for ${file.name} not found`);\n      }\n    } else {\n      // For regular image files, use FileReader as before\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        showImagePreview(e.target.result, file.name);\n        showContentArea(\"imagePreviewContainer\");\n      };\n      reader.readAsDataURL(file);\n    }\n  }\n\n  function showImagePreview(content, fileName) {\n    const imagePreviewContainer = document.getElementById(\"imagePreviewContainer\");\n    const imagePreview = document.getElementById(\"imagePreview\");\n    const imageInfo = document.getElementById(\"imageInfo\");\n\n    // Check if content is base64\n    const isBase64 = /^data:image\\/[a-z]+;base64,/.test(content);\n\n    if (isBase64) {\n      imagePreview.src = content;\n      imagePreviewContainer.style.display = \"block\";\n\n      // Get file information\n      const fileExtension = fileName.split(\".\").pop().toLowerCase();\n      const base64Data = content.split(\",\")[1];\n      const decodedData = atob(base64Data);\n      const fileSizeBytes = decodedData.length;\n      const fileSizeKB = (fileSizeBytes / 1024).toFixed(2);\n\n      // Get image dimensions\n      const img = new Image();\n      img.onload = function () {\n        const dimensions = `${this.width}x${this.height}`;\n        imageInfo.innerHTML = `\n          <p>Filename: ${fileName}</p>\n          <p>Extension: ${fileExtension}</p>\n          <p>Dimensions: ${dimensions}</p>\n          <p>Size: ${fileSizeKB} KB</p>\n          <p>Base64 character count: ${base64Data.length}</p>\n        `;\n      };\n      img.src = content;\n    } else {\n      // If it's not a valid image, hide the preview\n      imagePreviewContainer.style.display = \"none\";\n      imageInfo.innerHTML = `\n        <p>Filename: ${fileName}</p>\n        <p>Not a valid image file or base64 string</p>\n      `;\n    }\n  }\n\n  async function handleGenerateAll() {\n    for (let i = 0; i < excelFiles.length; i++) {\n      await handleGenerateQuery(excelFiles[i]);\n    }\n\n    if (excelFiles.length > 0) {\n      selectFile(0, \"excel\");\n    }\n  }\n\n  async function handleGenerateQuery(file) {\n    console.log(`Starting handleGenerateQuery for file: ${file.name}`);\n    if (!file) {\n      showError(\"Please select an Excel file.\");\n      return;\n    }\n\n    const queryType = queryTypeSelect.value;\n    try {\n      const result = await new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = async (e) => {\n          try {\n            const data = new Uint8Array(e.target.result);\n            const workbook = XLSX.read(data, { type: \"array\" });\n\n            if (workbook.SheetNames.length < 2) {\n              resolve({\n                isValid: false,\n                errorMessage: \"Excel file must contain at least two sheets.\",\n              });\n              return;\n            }\n\n            const dataSheet = workbook.Sheets[workbook.SheetNames[0]];\n            const schemaSheet = workbook.Sheets[workbook.SheetNames[1]];\n\n            let tableData = XLSX.utils.sheet_to_json(dataSheet, { header: 1 });\n            const tableSchema = XLSX.utils.sheet_to_json(schemaSheet, {\n              header: [\"field\", \"dataType\", \"nullable\", \"blank\", \"order\"],\n            });\n\n            if (tableSchema.length === 0) {\n              resolve({\n                isValid: false,\n                errorMessage: \"Schema sheet is empty or improperly formatted.\",\n              });\n              return;\n            }\n\n            console.log(`Validating data for ${file.name}`);\n            const validationResult = validateData(tableData, tableSchema);\n            if (!validationResult.isValid) {\n              resolve({\n                isValid: false,\n                errorMessage: validationResult.errorMessage,\n              });\n              return;\n            }\n\n            console.log(`Processing image data for ${file.name}`);\n            tableData = await processImageData(tableData, tableSchema);\n\n            const fileName = file.name.split(\".\").slice(0, -1).join(\".\");\n            console.log(`Generating SQL query for ${fileName}`);\n            const primaryKeys = findPrimaryKeys(tableSchema, fileName);\n            const query = generateSQLQuery(tableData, tableSchema, queryType, fileName, primaryKeys);\n            resolve({\n              isValid: true,\n              query: query,\n              tableSchema: tableSchema,\n              primaryKeys: primaryKeys,\n            });\n          } catch (error) {\n            reject(error);\n          }\n        };\n        reader.onerror = reject;\n        reader.readAsArrayBuffer(file);\n      });\n\n      console.log(`Query generation result for ${file.name}: ${result.isValid ? \"Valid\" : \"Invalid\"}`);\n\n      if (result.isValid) {\n        generatedQueries[file.name] = {\n          query: result.query,\n          tableSchema: result.tableSchema,\n          primaryKeys: result.primaryKeys,\n          fullTableName: file.name.split(\".\").slice(0, -1).join(\".\"),\n        };\n        fileValidationStatus[file.name] = true;\n        if (file === selectedFile) {\n          editor.setValue(result.query);\n          clearError();\n        }\n      } else {\n        fileValidationStatus[file.name] = false;\n        fileValidationStatus[file.name + \"_error\"] = result.errorMessage;\n        if (file === selectedFile) {\n          showError(result.errorMessage);\n        }\n      }\n      updateFileList(); // Update file list to reflect new validation status\n    } catch (error) {\n      console.error(`Error in handleGenerateQuery for ${file.name}:`, error);\n      showError(`Error processing ${file.name}: ${error.message}`);\n    }\n  }\n\n  async function processImageData(tableData, tableSchema) {\n    console.log(\"Starting processImageData\");\n    const clobFields = tableSchema.filter((field) => field.dataType.toUpperCase().startsWith(\"CLOB\"));\n\n    if (clobFields.length === 0) {\n      console.log(\"No CLOB fields found, returning original data\");\n      return tableData;\n    }\n\n    for (let i = 1; i < tableData.length; i++) {\n      for (const clobField of clobFields) {\n        const clobFieldName = clobField.field.toLowerCase();\n        const clobColumnIndex = tableData[0].findIndex((field) => field.toLowerCase() === clobFieldName);\n\n        if (clobColumnIndex === -1) {\n          console.log(`CLOB field ${clobFieldName} not found in data, skipping`);\n          continue;\n        }\n\n        let content = tableData[i][clobColumnIndex];\n        if (typeof content !== \"string\" || content.length >= 100) {\n          continue;\n        }\n\n        const baseFileName = content.split(\".\").slice(0, -1).join(\".\").toLowerCase();\n        console.log(\"baseFileName:\", baseFileName);\n        const matchingFile = findMatchingFile(baseFileName);\n\n        if (matchingFile) {\n          try {\n            if (matchingFile.name.toLowerCase().endsWith(\".txt\")) {\n              console.log(`Reading text file: ${matchingFile.name}`);\n              content = await readTextFile(matchingFile);\n            } else {\n              console.log(`Converting image file to base64: ${matchingFile.name}`);\n              content = await convertToBase64(matchingFile);\n            }\n\n            if (content.startsWith(\"data:image\")) {\n              tableData[i][clobColumnIndex] = content;\n            } else {\n              console.warn(`Invalid image data for ${matchingFile.name}, keeping original value`);\n            }\n          } catch (error) {\n            console.warn(`Failed to process file ${matchingFile.name}: ${error.message}`);\n          }\n        } else {\n          console.log(`No matching file found for ${baseFileName}, keeping original value`);\n        }\n      }\n    }\n\n    console.log(\"Finished processImageData\");\n    return tableData;\n  }\n\n  function findMatchingFile(baseFileName) {\n    return [...textFiles, ...imageFiles].find((file) => file.name.split(\".\").slice(0, -1).join(\".\").toLowerCase() === baseFileName);\n  }\n\n  function formatCLOB(content) {\n    const chunkSize = 1000;\n    let formattedContent = \"\";\n    for (let i = 0; i < content.length; i += chunkSize) {\n      formattedContent += content.slice(i, i + chunkSize) + \"\\n\";\n    }\n    return formattedContent;\n  }\n\n  function getExcelColumnName(index) {\n    let columnName = \"\";\n    while (index >= 0) {\n      columnName = String.fromCharCode(65 + (index % 26)) + columnName;\n      index = Math.floor(index / 26) - 1;\n    }\n    return columnName;\n  }\n\n  function validateData(tableData, tableSchema) {\n    if (tableData.length === 0) {\n      return { isValid: false, errorMessage: \"Excel file is empty.\" };\n    }\n\n    if (tableData[0].length !== tableSchema.length) {\n      return {\n        isValid: false,\n        errorMessage: `Mismatch in field count. Sheet1 has ${tableData[0].length} field names, but Sheet2 has ${tableSchema.length} field names.`,\n      };\n    }\n\n    const fieldNames = new Set(tableData[0]);\n    const schemaFieldNames = new Set(tableSchema.map((field) => field.field));\n\n    // Check if all fields in Sheet1 exist in Sheet2\n    for (let field of fieldNames) {\n      if (!schemaFieldNames.has(field)) {\n        return {\n          isValid: false,\n          errorMessage: `Field '${field}' in Sheet1 does not exist in Sheet2.`,\n        };\n      }\n    }\n\n    // Check if all fields in Sheet2 exist in Sheet1\n    for (let field of schemaFieldNames) {\n      if (!fieldNames.has(field)) {\n        return {\n          isValid: false,\n          errorMessage: `Field '${field}' in Sheet2 does not exist in Sheet1.`,\n        };\n      }\n    }\n\n    // Create a map of field names to their indices in Sheet1\n    const fieldIndices = {};\n    tableData[0].forEach((field, index) => {\n      fieldIndices[field] = index;\n    });\n\n    // Validate data types and check for NULL in non-nullable fields\n    for (let i = 1; i < tableData.length; i++) {\n      for (let schema of tableSchema) {\n        const fieldIndex = fieldIndices[schema.field];\n        const value = tableData[i][fieldIndex];\n\n        // Ignore validation for created, updated, and config_id\n        if (\n          schema.field.toLowerCase() === \"created_time\" ||\n          schema.field.toLowerCase() === \"created_by\" ||\n          schema.field.toLowerCase() === \"updated_time\" ||\n          schema.field.toLowerCase() === \"updated_by\" ||\n          schema.field.toLowerCase() === \"config_id\"\n        ) {\n          continue;\n        }\n\n        // Check for NULL in non-nullable fields\n        if (schema.nullable.toLowerCase() === \"no\" && (value === null || value === undefined || value === \"NULL\" || value === \"null\")) {\n          const columnLetter = getExcelColumnName(fieldIndex);\n          return {\n            isValid: false,\n            errorMessage: `NON NULLABLE data on ROW ${i + 1} COLUMN ${columnLetter} is NULL(${schema.field}), PLEASE RECHECK`,\n          };\n        }\n\n        if (!validateField(value, schema)) {\n          const columnLetter = getExcelColumnName(fieldIndex);\n          return {\n            isValid: false,\n            errorMessage: `Invalid data in Sheet1 at row ${i + 1}, column ${columnLetter} (${schema.field}). Expected ${\n              schema.dataType\n            }, got ${value}`,\n          };\n        }\n      }\n    }\n\n    return { isValid: true, errorMessage: \"\" };\n  }\n\n  function validateField(value, schema) {\n    if (\n      schema.nullable.toLowerCase() === \"yes\" &&\n      (value === null || value === undefined || value === \"NULL\" || value === \"null\" || value === \"\")\n    ) {\n      return true;\n    }\n\n    switch (schema.dataType.split(\"(\")[0].toUpperCase()) {\n      case \"VARCHAR2\":\n      case \"VARCHAR\":\n        return true;\n      case \"NUMBER\":\n        return !isNaN(parseFloat(value)) && isFinite(value);\n      case \"TIMESTAMP\":\n        return isValidTimestamp(value);\n      default:\n        return true;\n    }\n  }\n\n  function isValidTimestamp(value) {\n    if (typeof value === \"string\") {\n      if (value.toLowerCase() === \"sysdate\") {\n        return true;\n      }\n    }\n\n    const formats = [\n      \"DD-MM-YYYY\",\n      \"DD-MM-YYYY HH:mm:ss\",\n      \"YYYY-MM-DD\",\n      \"YYYY-MM-DD HH:mm:ss\",\n      \"DD-MM-YYYY HH.mm.ss,SSSSSSSSS\",\n      \"DD/MM/YYYY\",\n      \"DD/M/YYYY\",\n      \"M/D/YYYY H:mm:ss.SSSSSS A\",\n    ];\n\n    return formats.some((format) => moment(value, format, true).isValid());\n  }\n\n  function generateSQLQuery(tableData, tableSchema, queryType, fileName, primaryKeys) {\n    let schemaName, tableName;\n\n    if (fileName.includes(\".\")) {\n      [schemaName, tableName] = fileName.split(\".\");\n    } else {\n      schemaName = \"schema_name\";\n      tableName = fileName;\n      console.log(\"No dot found - using fileName as tableName:\", tableName);\n    }\n\n    const fullTableName = `${schemaName.toLowerCase()}.${tableName.toLowerCase()}`;\n    console.log(\"Final fullTableName:\", `${fullTableName}`);\n    console.log(\"primaryKeys:\", primaryKeys);\n\n    // Use the field names from Sheet 1 (tableData[0]) instead of the schema\n    const fieldNames = tableData[0].map((field) => field.toLowerCase());\n\n    const fieldIndices = {};\n    tableData[0].forEach((field, index) => {\n      fieldIndices[field.toLowerCase()] = index;\n    });\n\n    // Create a map of field names to their schema information\n    const schemaMap = {};\n    tableSchema.forEach((schema) => {\n      schemaMap[schema.field.toLowerCase()] = schema;\n    });\n\n    let query = \"\";\n\n    if (queryType === \"insert\") {\n      query = `SET DEFINE OFF;\\n\\n`;\n      for (let i = 1; i < tableData.length; i++) {\n        query += `INSERT INTO ${fullTableName} (${fieldNames.join(\", \")}) `;\n        query += `VALUES (`;\n        const values = fieldNames.map((field) => {\n          const value = tableData[i][fieldIndices[field]];\n          return formatValue(value, schemaMap[field], fullTableName);\n        });\n        query += values.join(\", \");\n        query += \");\\n\";\n      }\n    } else if (queryType === \"merge\") {\n      query = `SET DEFINE OFF;\\n\\n`;\n      query += `MERGE INTO ${fullTableName} t\\nUSING (\\n`;\n\n      for (let i = 1; i < tableData.length; i++) {\n        query += \"  SELECT \";\n        query += fieldNames\n          .map((field) => {\n            const value = tableData[i][fieldIndices[field]];\n            const schema = schemaMap[field];\n            return `${formatValue(value, schema, fullTableName)} AS ${field}`;\n          })\n          .join(\", \");\n        query += \" FROM DUAL\";\n        if (i < tableData.length - 1) query += \" UNION ALL\\n\";\n      }\n\n      query += `\\n) s\\nON (${primaryKeys.map((pk) => `t.${pk} = s.${pk}`).join(\" AND \")})\\n`;\n      query += `WHEN MATCHED THEN UPDATE SET\\n`;\n      query += fieldNames\n        .filter(\n          (field) =>\n            !primaryKeys.some((pk) => pk.toLowerCase() === field.toLowerCase()) &&\n            field.toLowerCase() !== \"created_time\" &&\n            field.toLowerCase() !== \"created_by\"\n        )\n        .map((field) => `  t.${field} = s.${field}`)\n        .join(\",\\n\");\n      query += `\\nWHEN NOT MATCHED THEN INSERT (${fieldNames.join(\", \")})\\n`;\n      query += `VALUES (${fieldNames.map((field) => `s.${field}`).join(\", \")});\\n`;\n    } else if (queryType === \"merge-classic\") {\n      query = `SET DEFINE OFF;\\n\\n`;\n      for (let i = 1; i < tableData.length; i++) {\n        query += `MERGE INTO ${fullTableName} tgt\\nUSING (SELECT`;\n        query += fieldNames\n          .map((field) => {\n            const value = tableData[i][fieldIndices[field]];\n            const schema = schemaMap[field];\n            return `\\n  ${formatValue(value, schema, fullTableName)} AS ${field}`;\n          })\n          .join(\",\");\n        query += `\\nFROM DUAL) src\\nON (${primaryKeys.map((pk) => `tgt.${pk} = src.${pk}`).join(\" AND \")})\\n`;\n        query += `WHEN MATCHED THEN UPDATE SET\\n`;\n        query += fieldNames\n          .filter(\n            (field) =>\n              !primaryKeys.some((pk) => pk.toLowerCase() === field.toLowerCase()) &&\n              field.toLowerCase() !== \"created_time\" &&\n              field.toLowerCase() !== \"created_by\"\n          )\n          .map((field) => `  tgt.${field} = src.${field}`)\n          .join(\",\\n\");\n        query += `\\nWHEN NOT MATCHED THEN INSERT (${fieldNames.join(\", \")})\\n`;\n        query += `VALUES (${fieldNames.map((field) => `src.${field}`).join(\", \")});\\n\\n`;\n      }\n    }\n\n    const pkConditions = primaryKeys.map((pk) => {\n      const pkValues = tableData\n        .slice(1)\n        .map((row) => {\n          const pkIndex = fieldIndices[pk.toLowerCase()];\n          const pkValue = row[pkIndex];\n          const pkSchema = schemaMap[pk.toLowerCase()];\n          return formatValue(pkValue, pkSchema, fullTableName);\n        })\n        .filter((value) => value !== \"NULL\");\n      return `${pk} IN (${pkValues.join(\", \")})`;\n    });\n\n    const whereClause = pkConditions.join(\" AND \");\n\n    query += `\\n--Check updated data in the last 5 minutes\\nSELECT * FROM ${fullTableName} WHERE updated_time >= SYSDATE - INTERVAL '5' MINUTE;`;\n    query += `\\nSELECT * FROM ${fullTableName} WHERE ${whereClause};`;\n\n    return query;\n  }\n\n  function formatValue(value, schema, fullTableName) {\n    const fieldName = schema.field.toLowerCase();\n    const dataType = schema.dataType.split(\"(\")[0].toUpperCase();\n    const capacity = schema.dataType.match(/\\((\\d+)\\)/);\n\n    // Handle sequential config ID\n    if (fieldName.toLowerCase() === \"config_id\" && dataType === \"NUMBER\") {\n      return `(SELECT MAX(${fieldName})+1 FROM ${fullTableName})`;\n    }\n\n    // Handle sequential system config\n    if (fieldName === \"system_config_id\" && fullTableName.toLowerCase() === \"config.system_config\") {\n      return `(SELECT MAX(CAST(${fieldName} AS INT))+1 FROM ${fullTableName})`;\n    }\n\n    // Handle created_time and updated_time\n    if (fieldName === \"created_time\" || fieldName === \"updated_time\") {\n      return `SYSDATE`;\n    }\n\n    // Handle created_by and updated_by\n    if (fieldName === \"created_by\" || fieldName === \"updated_by\") {\n      return `'SYSTEM'`;\n    }\n\n    if (value === null || value === undefined || value === \"NULL\" || value === \"null\") {\n      return \"NULL\";\n    }\n\n    switch (dataType) {\n      case \"VARCHAR2\":\n      case \"VARCHAR\":\n        return `'${value.toString().replace(/'/g, \"''\")}'`;\n      case \"CHAR\":\n        if (capacity) {\n          return `RPAD('${value.toString().replace(/'/g, \"''\")}', ${capacity[1]})`;\n        }\n        return `'${value.toString().replace(/'/g, \"''\")}'`;\n      case \"NUMBER\":\n        return value;\n      case \"DATE\":\n        return `TO_DATE('${value}', 'YYYY-MM-DD')`;\n      case \"TIMESTAMP\":\n        return formatTimestamp(value);\n      case \"CLOB\":\n        return formatCLOB(value);\n      case \"BLOB\":\n        return formatBLOB(value);\n      default:\n        return `'${value.toString().replace(/'/g, \"''\")}'`;\n    }\n  }\n\n  function formatTimestamp(value) {\n    if (value.toUpperCase() === \"SYSDATE\") {\n      return \"SYSDATE\";\n    }\n\n    // Detect the date format\n    let format;\n    let oracleFormat;\n    if (/^\\d{2}-\\d{2}-\\d{4}$/.test(value)) {\n      format = \"DD-MM-YYYY\";\n      oracleFormat = \"DD-MM-YYYY\";\n    } else if (/^\\d{2}-\\d{2}-\\d{4} \\d{2}:\\d{2}:\\d{2}$/.test(value)) {\n      format = \"DD-MM-YYYY HH:mm:ss\";\n      oracleFormat = \"DD-MM-YYYY HH24:MI:SS\";\n    } else if (/^\\d{4}-\\d{2}-\\d{2}$/.test(value)) {\n      format = \"YYYY-MM-DD\";\n      oracleFormat = \"YYYY-MM-DD\";\n    } else if (/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/.test(value)) {\n      format = \"YYYY-MM-DD HH:mm:ss\";\n      oracleFormat = \"YYYY-MM-DD HH24:MI:SS\";\n    } else if (/^\\d{2}-\\d{2}-\\d{4} \\d{2}\\.\\d{2}\\.\\d{2},\\d{9}$/.test(value)) {\n      format = \"DD-MM-YYYY HH.mm.ss,SSSSSSSSS\";\n      oracleFormat = \"DD-MM-YYYY HH24:MI:SS.FF9\";\n    } else if (/^\\d{1,2}\\/\\d{1,2}\\/\\d{4} \\d{1,2}:\\d{2}:\\d{2}(\\.\\d{6})? [AP]M$/.test(value)) {\n      format = \"M/D/YYYY h:mm:ss.SSSSSS A\";\n      oracleFormat = \"MM/DD/YYYY HH24:MI:SS.FF6\";\n    } else {\n      // Default format if none of the above match\n      format = \"DD-MM-YYYY HH:mm:ss\";\n      oracleFormat = \"DD-MM-YYYY HH24:MI:SS\";\n    }\n\n    // Parse the date using the detected format\n    const parsedDate = moment(value, format, true);\n\n    if (!parsedDate.isValid()) {\n      console.warn(`Invalid date format: ${value}. Using as-is.`);\n      return `TO_TIMESTAMP('${value.replace(/'/g, \"''\")}', '${oracleFormat}')`;\n    }\n\n    // Format the date to a standardized string\n    let formattedDate;\n    if (format === \"DD/MM/YYYY\") {\n      formattedDate = parsedDate.format(\"DD-MM-YYYY\");\n      oracleFormat = \"DD-MM-YYYY\";\n    } else {\n      formattedDate = parsedDate.format(\"YYYY-MM-DD HH:mm:ss.SSSSSS\");\n      oracleFormat = \"YYYY-MM-DD HH24:MI:SS.FF6\";\n    }\n\n    return `TO_TIMESTAMP('${formattedDate}', '${oracleFormat}')`;\n  }\n\n  function formatCLOB(value) {\n    const chunkSize = 1000;\n    let result = \"\";\n    let currentChunkSize = 0;\n    let isFirstChunk = true;\n\n    for (let i = 0; i < value.length; i++) {\n      let char = value[i];\n\n      if (char === \"'\" || char === \"\\u2018\" || char === \"\\u2019\") {\n        char = \"''\";\n      } else if (char === \"\\u201C\" || char === \"\\u201D\") {\n        char = '\"';\n      }\n\n      if (currentChunkSize + char.length > chunkSize || isFirstChunk) {\n        if (!isFirstChunk) {\n          result += \"') || \\n\";\n        }\n        result += \"to_clob('\";\n        currentChunkSize = 0;\n        isFirstChunk = false;\n      }\n\n      result += char;\n      currentChunkSize += char.length;\n    }\n\n    result += \"')\";\n    return result;\n  }\n\n  function formatBLOB(value) {\n    // Assuming value is a base64 encoded string\n    return `UTL_RAW.CAST_TO_RAW('${value}')`;\n  }\n\n  function handleDownloadSQL() {\n    if (!selectedFile) {\n      showError(\"No file selected. Please select a file to download.\");\n      return;\n    }\n\n    const sql = generatedQueries[selectedFile.name]?.query;\n    if (!sql) {\n      showError(\"No SQL query generated for the selected file.\");\n      return;\n    }\n\n    const downloadButton = document.getElementById(\"downloadSQL\");\n    const originalText = downloadButton.textContent;\n    const originalColor = downloadButton.style.backgroundColor;\n\n    // Change button appearance\n    downloadButton.textContent = \"Downloading\";\n    downloadButton.style.backgroundColor = \"red\";\n    downloadButton.disabled = true;\n\n    const blob = new Blob([sql], { type: \"text/plain\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    const fileName = selectedFile.name.replace(/\\.xlsx$/, \"\");\n    a.href = url;\n    a.download = `${fileName}.sql`;\n\n    // Use setTimeout to allow the UI to update before starting the download\n    setTimeout(() => {\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      // Revert button appearance after a short delay\n      setTimeout(() => {\n        downloadButton.textContent = originalText;\n        downloadButton.style.backgroundColor = originalColor;\n        downloadButton.disabled = false;\n      }, 1000); // Delay for 1 second to show \"Downloading\" state\n    }, 0);\n  }\n\n  function handleDownloadAll() {\n    if (Object.keys(generatedQueries).length === 0) {\n      showError(\"No queries generated yet.\");\n      return;\n    }\n\n    const downloadAllButton = document.getElementById(\"downloadAll\");\n    const originalText = downloadAllButton.textContent;\n    const originalColor = downloadAllButton.style.backgroundColor;\n\n    // Change button appearance\n    downloadAllButton.textContent = \"Preparing...\";\n    downloadAllButton.style.backgroundColor = \"red\";\n    downloadAllButton.disabled = true;\n\n    const zip = new JSZip();\n    for (const [fileName, queryData] of Object.entries(generatedQueries)) {\n      const sqlFileName = fileName.replace(/\\.xlsx$/, \".sql\");\n      zip.file(sqlFileName, queryData.query);\n    }\n\n    zip\n      .generateAsync({ type: \"blob\" })\n      .then((content) => {\n        const url = URL.createObjectURL(content);\n        const a = document.createElement(\"a\");\n        const currentDate = new Date().toISOString().split(\"T\")[0]; // Format: YYYY-MM-DD\n        a.href = url;\n        a.download = `querify-${currentDate}.zip`;\n\n        downloadAllButton.textContent = \"Downloading...\";\n\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n      })\n      .catch((error) => {\n        console.error(\"Error generating zip file:\", error);\n        showError(\"Failed to generate zip file. Please try again.\");\n      })\n      .finally(() => {\n        // Revert button appearance\n        setTimeout(() => {\n          downloadAllButton.textContent = originalText;\n          downloadAllButton.style.backgroundColor = originalColor;\n          downloadAllButton.disabled = false;\n        }, 1000);\n      });\n  }\n\n  function showError(message) {\n    errorMessagesDiv.textContent = message;\n    errorMessagesDiv.style.color = \"red\";\n    errorMessagesDiv.style.display = \"block\";\n  }\n\n  function clearError() {\n    errorMessagesDiv.textContent = \"\";\n    errorMessagesDiv.style.display = \"none\";\n  }\n\n  function toggleWordWrap() {\n    isWordWrapEnabled = !isWordWrapEnabled;\n    editor.setOption(\"lineWrapping\", isWordWrapEnabled);\n    toggleWrapButton.style.textDecoration = isWordWrapEnabled ? \"underline\" : \"none\";\n  }\n\n  function handleQueryTypeChange() {\n    if (excelFiles.length > 0) {\n      handleGenerateAll();\n    }\n    updateSplitButtonState();\n  }\n\n  function updateSplitButtonState() {\n    const queryType = queryTypeSelect.value;\n    splitButton.disabled = !(selectedFile && (queryType === \"merge-classic\" || queryType === \"insert\"));\n  }\n\n  async function handleSplitSQL() {\n    if (!selectedFile || !generatedQueries[selectedFile.name]) {\n      showError(\"No valid SQL query to split.\");\n      return;\n    }\n\n    const splitButton = document.getElementById(\"splitSQL\");\n    const originalText = splitButton.textContent;\n    const originalColor = splitButton.style.backgroundColor;\n\n    // Change button appearance\n    splitButton.textContent = \"Processing...\";\n    splitButton.style.backgroundColor = \"red\";\n    splitButton.disabled = true;\n\n    const sql = generatedQueries[selectedFile.name].query;\n    const queryType = queryTypeSelect.value;\n    const maxChunkSize = 90 * 1024; // 90 KB\n\n    // Get the necessary data from the generatedQueries object\n    const fullTableName = generatedQueries[selectedFile.name].fullTableName;\n\n    try {\n      const { chunks, oversizedChunksCount } = splitSQLQuery(sql, queryType, maxChunkSize, fullTableName);\n      const zip = new JSZip();\n\n      chunks.forEach((chunk, index) => {\n        const paddedIndex = String(index + 1).padStart(2, \"0\");\n        const chunkFileName = `${paddedIndex}_${selectedFile.name.replace(/\\.xlsx$/, \"\")}.sql`;\n        zip.file(chunkFileName, chunk);\n      });\n\n      const content = await zip.generateAsync({ type: \"blob\" });\n      const url = URL.createObjectURL(content);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = `${selectedFile.name.replace(/\\.xlsx$/, \"\")}_split.zip`;\n\n      splitButton.textContent = \"Downloading...\";\n\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      showSuccess(`SQL query split into ${chunks.length} chunks. ${oversizedChunksCount} chunk(s) exceed 90 KB.`);\n    } catch (error) {\n      showError(`Failed to split SQL: ${error.message}`);\n    } finally {\n      // Revert button appearance after a short delay\n      setTimeout(() => {\n        splitButton.textContent = originalText;\n        splitButton.style.backgroundColor = originalColor;\n        splitButton.disabled = false;\n      }, 1000); // Delay for 1 second to show \"Downloading\" state\n    }\n  }\n\n  function splitSQLQuery(sql, queryType, maxChunkSize, fullTableName) {\n    let chunks = [];\n    let currentChunk = \"\";\n    let oversizedChunksCount = 0;\n    const statements = sql.split(/;(?=(?:[^']*'[^']*')*[^']*$)/);\n\n    // Filter out SET DEFINE OFF and SELECT statements\n    const relevantStatements = statements.filter((stmt) => {\n      const trimmedStmt = stmt.trim().toUpperCase();\n      return (\n        !trimmedStmt.startsWith(\"SET DEFINE OFF\") &&\n        !trimmedStmt.startsWith(\"SELECT\") &&\n        (trimmedStmt.startsWith(\"INSERT\") || trimmedStmt.startsWith(\"MERGE\"))\n      );\n    });\n\n    for (const statement of relevantStatements) {\n      if (statement.trim() === \"\") continue;\n\n      const potentialChunk = currentChunk + statement + \";\"; // + \";\\n\";\n\n      if (potentialChunk.length > maxChunkSize && currentChunk !== \"\") {\n        chunks.push(currentChunk);\n        currentChunk = statement + \";\"; // + \";\\n\";\n      } else {\n        currentChunk = potentialChunk;\n      }\n      if (statement.length + 1 > maxChunkSize) {\n        oversizedChunksCount++;\n        console.log(`${oversizedChunksCount} - A single statement exceeds ${maxChunkSize} bytes and cannot be split further.`);\n      }\n    }\n\n    if (currentChunk !== \"\") {\n      chunks.push(currentChunk);\n    }\n\n    if (chunks.length === 0) {\n      throw new Error(\"Unable to split the SQL query into chunks smaller than 90 KB.\");\n    }\n\n    // Add SET DEFINE OFF at the beginning of each chunk\n    chunks = chunks.map((chunk) => \"SET DEFINE OFF;\" + chunk);\n\n    // Add SELECT statement to each chunk\n    chunks = chunks.map((chunk) => {\n      const tableName = extractTableName(chunk, queryType);\n      return (\n        chunk +\n        `\\n--Check updated data in the last 5 minutes\\nSELECT * FROM ${fullTableName} WHERE updated_time >= SYSDATE - INTERVAL '5' MINUTE;`\n      );\n    });\n\n    return { chunks, oversizedChunksCount };\n  }\n\n  function extractTableName(chunk, queryType) {\n    let match;\n    if (queryType === \"merge-classic\") {\n      match = chunk.match(/MERGE INTO (\\w+\\.?\\w+)/i);\n    } else if (queryType === \"insert\") {\n      match = chunk.match(/INSERT INTO (\\w+\\.?\\w+)/i);\n    }\n    return match ? match[1] : \"unknown_table\";\n  }\n\n  function showSuccess(message) {\n    errorMessagesDiv.textContent = message;\n    errorMessagesDiv.style.color = \"green\";\n    errorMessagesDiv.style.display = \"block\";\n  }\n\n  function handleDragOver(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    dragDropArea.classList.add(\"drag-over\");\n  }\n\n  function handleDragLeave(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    dragDropArea.classList.remove(\"drag-over\");\n  }\n\n  function handleDrop(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    dragDropArea.classList.remove(\"drag-over\");\n    const files = Array.from(e.dataTransfer.files);\n    processFiles(files);\n  }\n\n  // // Implement a simple tooltip functionality (UI Related)\n  // const buttons = document.querySelectorAll(\"button[title]\");\n  // buttons.forEach((button) => {\n  //   button.addEventListener(\"mouseover\", showTooltip);\n  //   button.addEventListener(\"mouseout\", hideTooltip);\n  // });\n\n  // function showTooltip(e) {\n  //   const tooltip = document.createElement(\"div\");\n  //   tooltip.className = \"querify-tooltip\";\n  //   tooltip.textContent = e.target.getAttribute(\"title\");\n  //   document.body.appendChild(tooltip);\n  //   positionTooltip(e, tooltip);\n  // }\n\n  // function hideTooltip() {\n  //   const tooltip = document.querySelector(\".querify-tooltip\");\n  //   if (tooltip) tooltip.remove();\n  // }\n\n  // function positionTooltip(e, tooltip) {\n  //   const rect = e.target.getBoundingClientRect();\n  //   tooltip.style.left = `${rect.left + rect.width / 2 - tooltip.offsetWidth / 2}px`;\n  //   tooltip.style.top = `${rect.top + 30}px`;\n  // }\n\n  function showAboutPopup() {\n    const popup = document.createElement(\"div\");\n    popup.className = \"about-popup\";\n\n    const closeButton = document.createElement(\"span\");\n    closeButton.className = \"about-popup-close\";\n    closeButton.innerHTML = \"&times;\";\n    closeButton.onclick = closeAboutPopup;\n\n    const content = document.createElement(\"div\");\n    content.className = \"about-popup-content markdown-body\"; // Add this class\n\n    // Load the MD file\n    fetch(\"src/styles/about-querify.md\")\n      .then((response) => response.text())\n      .then((text) => {\n        content.innerHTML = marked.parse(text);\n\n        popup.appendChild(closeButton);\n        popup.appendChild(content);\n\n        const overlay = document.createElement(\"div\");\n        overlay.className = \"about-popup-overlay\";\n        overlay.onclick = closeAboutPopup;\n\n        document.body.appendChild(overlay);\n        document.body.appendChild(popup);\n\n        overlay.style.display = \"block\";\n        popup.style.display = \"block\";\n      })\n      .catch((error) => {\n        console.error(\"Error loading the about-querify.md file:\", error);\n        content.innerHTML = \"<p>Error loading content. Please try again later.</p>\";\n\n        popup.appendChild(closeButton);\n        popup.appendChild(content);\n\n        const overlay = document.createElement(\"div\");\n        overlay.className = \"about-popup-overlay\";\n        overlay.onclick = closeAboutPopup;\n\n        document.body.appendChild(overlay);\n        document.body.appendChild(popup);\n\n        overlay.style.display = \"block\";\n        popup.style.display = \"block\";\n      });\n  }\n\n  function closeAboutPopup() {\n    const popup = document.querySelector(\".about-popup\");\n    const overlay = document.querySelector(\".about-popup-overlay\");\n\n    if (popup) popup.remove();\n    if (overlay) overlay.remove();\n  }\n}\n"],"names":["querifyTemplate","initQuerify","container","excelFiles","textFiles","imageFiles","fileContents","selectedFile","editor","isWordWrapEnabled","generatedQueries","fileValidationStatus","scriptDependencies","fileInput","queryTypeSelect","generateAllButton","errorMessagesDiv","downloadButton","downloadAllButton","copyButton","toggleWrapButton","queryEditor","dragDropArea","splitButton","aboutButton","handleFileSelection","handleGenerateAll","handleDownloadSQL","handleDownloadAll","copyToClipboard","toggleWordWrap","handleQueryTypeChange","handleDragOver","handleDragLeave","handleDrop","handleSplitSQL","showAboutPopup","loadScriptInOrder","clearError","scripts","index","script","initializeEditor","selectFile","type","showError","showContentArea","showTextFile","selectImageFile","updateSelectedFileHighlight","updateSplitButtonState","button","areaId","area","selectedFiles","processFiles","files","file","extension","reader","e","content","updateFileList","handleTextFiles","handleImageFiles","excelFilesDiv","textFilesDiv","imageFilesDiv","fileListContainer","fileButton","createFileButton","fileInfo","fileNameSpan","pkSpan","sqlSizeSpan","primaryKeys","query","sizeInBytes","sizeText","findPrimaryKeys","tableSchema","tableName","parameterKeyField","field","eventCodeField","pkFields","textPreview","convertToBase64","resolve","reject","readTextFile","error","base64Data","showImagePreview","fileName","imagePreviewContainer","imagePreview","imageInfo","fileExtension","fileSizeKB","img","dimensions","i","handleGenerateQuery","queryType","result","data","workbook","dataSheet","schemaSheet","tableData","validationResult","validateData","processImageData","generateSQLQuery","clobFields","clobField","clobFieldName","clobColumnIndex","baseFileName","matchingFile","findMatchingFile","getExcelColumnName","columnName","fieldNames","schemaFieldNames","fieldIndices","schema","fieldIndex","value","columnLetter","validateField","isValidTimestamp","format","schemaName","fullTableName","schemaMap","values","formatValue","pk","whereClause","pkValues","row","pkIndex","pkValue","pkSchema","fieldName","dataType","capacity","formatTimestamp","formatCLOB","formatBLOB","oracleFormat","parsedDate","formattedDate","currentChunkSize","isFirstChunk","char","sql","_a","originalText","originalColor","blob","url","a","zip","queryData","sqlFileName","currentDate","message","maxChunkSize","chunks","oversizedChunksCount","splitSQLQuery","chunk","chunkFileName","showSuccess","currentChunk","relevantStatements","stmt","trimmedStmt","statement","potentialChunk","extractTableName","match","popup","closeButton","closeAboutPopup","response","text","overlay"],"mappings":"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"}